/***************************************************************************
 *   Copyright (C) 2011-2012 by Fabrizio Montesi <famontesi@gmail.com>     *
 *   Copyright (C) 2011 by Marco Carbone <carbonem@itu.dk>                 *
 *   Copyright (C) 2013-2014 by Saverio Giallorenzo <sgiallor@cs.unibo.it> *
 *   Copyright (C) 2013-2014 by Ivan Lanese <lanese@cs.unibo.it>           *
 *   Copyright (C) 2013-2014 by Jacopo Mauro <jmauro@cs.unibo.it>          *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU Library General Public License as       *
 *   published by the Free Software Foundation; either version 2 of the    *
 *   License, or (at your option) any later version.                       *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU Library General Public     *
 *   License along with this program; if not, write to the                 *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 *                                                                         *
 *   For details about the authors of this software, see the AUTHORS file. *
 ***************************************************************************/

grammar org.Aioc with org.eclipse.xtext.common.Terminals

generate aioc "http://www.aioc.org"

AiocJ:
	( aioc = Aioc | ruleSet+=Rule* )
;

Aioc:
	( functionLocation += FunctionLocation )*
	"preamble" LCURLY ( preamble = Preamble )	RCURLY
		"aioc" LCURLY	(choreography = Choreography ) RCURLY
;

Rule:
	"rule" LCURLY
		( functionLocation += FunctionLocation )*
		( "newRoles" COLON newRoles=NewRole )?
		( locDefinition = LocationDefinition )?
		"on" LCURLY where = Where RCURLY
		"do" LCURLY choreography=Choreography RCURLY 
	RCURLY
;

NewRole:
	role=ID (COMMA nextRole=NewRole)? 
;

Where:
	whereCondition = WhereCompareCondition
	| => paren?=LRND whereCondition = WhereCompareCondition RRND
;

WhereCompareCondition:
	left = WhereExpressionBasicTerm operator = ConditionOperator
			right = WhereExpressionBasicTerm ( ( and?=AND | or?=OR ) next=Where )?
;

WhereExpressionBasicTerm: "N." nVariable = ID 
										| "E." eVariable = ID
										| sVariable = ID
										| constant = Constant
//										| true ?= TRUE
//										| false ?= FALSE
//										| 
;

Preamble:
	"starter:" starter = ID
	( locDefinition = LocationDefinition )?
;

FunctionLocation:
	"include" functions = FunctionList 
	"from" location = STRING
	("with" protocol = STRING)?
;

FunctionList:
	functionName += ID (COMMA functionName += ID)*
;

LocationDefinition:
	"location" AT role = ID COLON location = STRING
	( continuation=LocationDefinition )?
;

Choreography:
	seqBlock = SeqBlock ( PIPE par = Choreography )?
;

SeqBlock:
	event = ( Skip | Interaction | LocalCode | IfThenElse | 
		While | Scope | NestedChoreography
	) 
	( SEMICOLON next = Choreography )?
;

Skip:
	skip ?= "skip"
;

Interaction:
	operation = ID COLON
	sender = ID LRND
		( senderExpression = SumExpression )?
	RRND ARROW
	receiver = ID LRND
		( receiverVariable = ID )?
	RRND 
;


// Local thread code
LocalCode:
	// Ask a question to the user, e.g. result@thr = getInput( question )
	{LocalAskCommand}
	resultVariable = ID AT thread = ID ASSIGN "getInput" LRND question = Expression RRND
	|
	// Show some text, e.g. show@thr("Hello, world!")
	{LocalShowCommand}
	variable = ID AT thread = ID ASSIGN "show" LRND expression = Expression RRND
	|
	// Make an internal state assignment var@thr = e
	{LocalAssignmentCommand}
	variable = ID AT thread = ID ASSIGN ( expression = Expression | function = Function ) 
;

//
// if (condition)@thread { Choreography } else { Choreography }
//
IfThenElse:
	( key = ID COLON )? 'if' LRND condition = Condition RRND AT thread = ID 
		LCURLY then = Choreography RCURLY
	( 'else' LCURLY else = Choreography RCURLY )?
;

//
// while (condition)@thread { Choreography }
// 
While:
	'while' LRND condition = Condition RRND AT thread = ID 
		LCURLY choreography = Choreography RCURLY
		( LCURLY key = ID RCURLY )?
;

//Scope code
Scope:
	'scope' AT thread = ID 
	LCURLY ( choreography = Choreography ) RCURLY
	( 'prop' LCURLY properties = AssignmentSet RCURLY )?
	( 'roles' LCURLY roles = Roles RCURLY )?
	( LCURLY key = ID RCURLY )?
;

Roles:
	roles += ID ( COMMA roles += ID )*
;

//nested Choreography code
NestedChoreography:
	LCURLY
		choreography = Choreography
	RCURLY
;

// Assignment
AssignmentSet:
	assignment = Assignment (COMMA continuation = AssignmentSet)?
;

Assignment:
	"N."variable = ID ASSIGN expression = Expression
;

// Expressions and conditions

Expression:
	sumExpression = SumExpression;

SumExpression:
	children += ExpressionBasicTerm (children += SumExpressionTerm)*;

SumExpressionTerm:
	{SumExpressionAddTerm} PLUS expression = ExpressionBasicTerm
	|
	{SumExpressionSubtractTerm} MINUS expression = ExpressionBasicTerm
	|
	{SumExpressionTimesTerm} TIMES expression = ExpressionBasicTerm
	|
	{SumExpressionDivideTerm} SLASH expression = ExpressionBasicTerm
;

ExpressionBasicTerm: ( not?=NOT )? variable = ID | constant = Constant | 
//	LRND expression = Expression RRND
LRND condition = Condition RRND
;

Constant:
	intValue = Integer | floatValue = Float | strValue = STRING | true = TRUE | false = FALSE
;

Condition:
	left = Expression ( operator = ConditionOperator right=Condition )?
;

ConditionOperator:
	lt ?= LT			|		leq ?= LEQ			|		equal ?= EQUAL					|
	gt ?= GT			|		geq ?= GEQ			|		not_equal ?= NOT_EQUAL	|
	and ?= AND			|		or ?= OR
;

Function:
	name=ID LRND
		( params += Expression ( COMMA params += Expression )* )?
	RRND
;

Integer: value=INT;
Float: value=DOUBLE;

terminal DOUBLE: INT? DOT INT;

// Terminals
terminal LCURLY: '{';
terminal RCURLY: '}';
terminal ARROW: '->';
terminal SEMICOLON: ';';
terminal PIPE: '|';
terminal COLON: ':';
terminal PLUS: '+';
terminal MINUS: '-';
terminal TIMES: '*';
terminal SLASH: '/';
terminal AT: '@';
terminal ASSIGN: '=';
terminal DOT: '.';
terminal NOT: '!';
terminal LRND: '(';
terminal RRND: ')';
terminal COMMA: ',';
terminal EQUAL: '==';
terminal NOT_EQUAL: '!=';
terminal LEQ: '<=';
terminal GEQ: '>=';
terminal LT: '<';
terminal GT: '>';
terminal AND: 'and';
terminal OR: 'or';
terminal TRUE: "true";
terminal FALSE: "false";