/*
 * generated by Xtext
 */
package org.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class AiocGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class AiocJElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.Aioc.AiocJ");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cAiocAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cAiocAiocParserRuleCall_0_0 = (RuleCall)cAiocAssignment_0.eContents().get(0);
		private final Assignment cRuleSetAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cRuleSetRuleParserRuleCall_1_0 = (RuleCall)cRuleSetAssignment_1.eContents().get(0);
		
		//AiocJ:
		//	aioc=Aioc | ruleSet+=Rule*;
		@Override public ParserRule getRule() { return rule; }

		//aioc=Aioc | ruleSet+=Rule*
		public Alternatives getAlternatives() { return cAlternatives; }

		//aioc=Aioc
		public Assignment getAiocAssignment_0() { return cAiocAssignment_0; }

		//Aioc
		public RuleCall getAiocAiocParserRuleCall_0_0() { return cAiocAiocParserRuleCall_0_0; }

		//ruleSet+=Rule*
		public Assignment getRuleSetAssignment_1() { return cRuleSetAssignment_1; }

		//Rule
		public RuleCall getRuleSetRuleParserRuleCall_1_0() { return cRuleSetRuleParserRuleCall_1_0; }
	}

	public class AiocElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.Aioc.Aioc");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFunctionLocationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFunctionLocationFunctionLocationParserRuleCall_0_0 = (RuleCall)cFunctionLocationAssignment_0.eContents().get(0);
		private final Keyword cPreambleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cLCURLYTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cPreambleAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPreamblePreambleParserRuleCall_3_0 = (RuleCall)cPreambleAssignment_3.eContents().get(0);
		private final RuleCall cRCURLYTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Keyword cAiocKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final RuleCall cLCURLYTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Assignment cChoreographyAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cChoreographyChoreographyParserRuleCall_7_0 = (RuleCall)cChoreographyAssignment_7.eContents().get(0);
		private final RuleCall cRCURLYTerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		
		//Aioc:
		//	functionLocation+=FunctionLocation*
		//	"preamble" LCURLY preamble=Preamble RCURLY
		//	"aioc" LCURLY choreography=Choreography RCURLY;
		@Override public ParserRule getRule() { return rule; }

		//functionLocation+=FunctionLocation* "preamble" LCURLY preamble=Preamble RCURLY "aioc" LCURLY choreography=Choreography
		//RCURLY
		public Group getGroup() { return cGroup; }

		//functionLocation+=FunctionLocation*
		public Assignment getFunctionLocationAssignment_0() { return cFunctionLocationAssignment_0; }

		//FunctionLocation
		public RuleCall getFunctionLocationFunctionLocationParserRuleCall_0_0() { return cFunctionLocationFunctionLocationParserRuleCall_0_0; }

		//"preamble"
		public Keyword getPreambleKeyword_1() { return cPreambleKeyword_1; }

		//LCURLY
		public RuleCall getLCURLYTerminalRuleCall_2() { return cLCURLYTerminalRuleCall_2; }

		//preamble=Preamble
		public Assignment getPreambleAssignment_3() { return cPreambleAssignment_3; }

		//Preamble
		public RuleCall getPreamblePreambleParserRuleCall_3_0() { return cPreamblePreambleParserRuleCall_3_0; }

		//RCURLY
		public RuleCall getRCURLYTerminalRuleCall_4() { return cRCURLYTerminalRuleCall_4; }

		//"aioc"
		public Keyword getAiocKeyword_5() { return cAiocKeyword_5; }

		//LCURLY
		public RuleCall getLCURLYTerminalRuleCall_6() { return cLCURLYTerminalRuleCall_6; }

		//choreography=Choreography
		public Assignment getChoreographyAssignment_7() { return cChoreographyAssignment_7; }

		//Choreography
		public RuleCall getChoreographyChoreographyParserRuleCall_7_0() { return cChoreographyChoreographyParserRuleCall_7_0; }

		//RCURLY
		public RuleCall getRCURLYTerminalRuleCall_8() { return cRCURLYTerminalRuleCall_8; }
	}

	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.Aioc.Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLCURLYTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cFunctionLocationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFunctionLocationFunctionLocationParserRuleCall_2_0 = (RuleCall)cFunctionLocationAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cNewRolesKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cCOLONTerminalRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Assignment cNewRolesAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cNewRolesNewRoleParserRuleCall_3_2_0 = (RuleCall)cNewRolesAssignment_3_2.eContents().get(0);
		private final Assignment cLocDefinitionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLocDefinitionLocationDefinitionParserRuleCall_4_0 = (RuleCall)cLocDefinitionAssignment_4.eContents().get(0);
		private final Keyword cOnKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final RuleCall cLCURLYTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Assignment cWhereAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cWhereWhereParserRuleCall_7_0 = (RuleCall)cWhereAssignment_7.eContents().get(0);
		private final RuleCall cRCURLYTerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		private final Keyword cDoKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final RuleCall cLCURLYTerminalRuleCall_10 = (RuleCall)cGroup.eContents().get(10);
		private final Assignment cChoreographyAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cChoreographyChoreographyParserRuleCall_11_0 = (RuleCall)cChoreographyAssignment_11.eContents().get(0);
		private final RuleCall cRCURLYTerminalRuleCall_12 = (RuleCall)cGroup.eContents().get(12);
		private final RuleCall cRCURLYTerminalRuleCall_13 = (RuleCall)cGroup.eContents().get(13);
		
		//Rule:
		//	"rule" LCURLY
		//	functionLocation+=FunctionLocation* ("newRoles" COLON newRoles=NewRole)?
		//	locDefinition=LocationDefinition?
		//	"on" LCURLY where=Where RCURLY
		//	"do" LCURLY choreography=Choreography RCURLY
		//	RCURLY;
		@Override public ParserRule getRule() { return rule; }

		//"rule" LCURLY functionLocation+=FunctionLocation* ("newRoles" COLON newRoles=NewRole)? locDefinition=LocationDefinition?
		//"on" LCURLY where=Where RCURLY "do" LCURLY choreography=Choreography RCURLY RCURLY
		public Group getGroup() { return cGroup; }

		//"rule"
		public Keyword getRuleKeyword_0() { return cRuleKeyword_0; }

		//LCURLY
		public RuleCall getLCURLYTerminalRuleCall_1() { return cLCURLYTerminalRuleCall_1; }

		//functionLocation+=FunctionLocation*
		public Assignment getFunctionLocationAssignment_2() { return cFunctionLocationAssignment_2; }

		//FunctionLocation
		public RuleCall getFunctionLocationFunctionLocationParserRuleCall_2_0() { return cFunctionLocationFunctionLocationParserRuleCall_2_0; }

		//("newRoles" COLON newRoles=NewRole)?
		public Group getGroup_3() { return cGroup_3; }

		//"newRoles"
		public Keyword getNewRolesKeyword_3_0() { return cNewRolesKeyword_3_0; }

		//COLON
		public RuleCall getCOLONTerminalRuleCall_3_1() { return cCOLONTerminalRuleCall_3_1; }

		//newRoles=NewRole
		public Assignment getNewRolesAssignment_3_2() { return cNewRolesAssignment_3_2; }

		//NewRole
		public RuleCall getNewRolesNewRoleParserRuleCall_3_2_0() { return cNewRolesNewRoleParserRuleCall_3_2_0; }

		//locDefinition=LocationDefinition?
		public Assignment getLocDefinitionAssignment_4() { return cLocDefinitionAssignment_4; }

		//LocationDefinition
		public RuleCall getLocDefinitionLocationDefinitionParserRuleCall_4_0() { return cLocDefinitionLocationDefinitionParserRuleCall_4_0; }

		//"on"
		public Keyword getOnKeyword_5() { return cOnKeyword_5; }

		//LCURLY
		public RuleCall getLCURLYTerminalRuleCall_6() { return cLCURLYTerminalRuleCall_6; }

		//where=Where
		public Assignment getWhereAssignment_7() { return cWhereAssignment_7; }

		//Where
		public RuleCall getWhereWhereParserRuleCall_7_0() { return cWhereWhereParserRuleCall_7_0; }

		//RCURLY
		public RuleCall getRCURLYTerminalRuleCall_8() { return cRCURLYTerminalRuleCall_8; }

		//"do"
		public Keyword getDoKeyword_9() { return cDoKeyword_9; }

		//LCURLY
		public RuleCall getLCURLYTerminalRuleCall_10() { return cLCURLYTerminalRuleCall_10; }

		//choreography=Choreography
		public Assignment getChoreographyAssignment_11() { return cChoreographyAssignment_11; }

		//Choreography
		public RuleCall getChoreographyChoreographyParserRuleCall_11_0() { return cChoreographyChoreographyParserRuleCall_11_0; }

		//RCURLY
		public RuleCall getRCURLYTerminalRuleCall_12() { return cRCURLYTerminalRuleCall_12; }

		//RCURLY
		public RuleCall getRCURLYTerminalRuleCall_13() { return cRCURLYTerminalRuleCall_13; }
	}

	public class NewRoleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.Aioc.NewRole");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRoleAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRoleIDTerminalRuleCall_0_0 = (RuleCall)cRoleAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cCOMMATerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cNextRoleAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNextRoleNewRoleParserRuleCall_1_1_0 = (RuleCall)cNextRoleAssignment_1_1.eContents().get(0);
		
		//NewRole:
		//	role=ID (COMMA nextRole=NewRole)?;
		@Override public ParserRule getRule() { return rule; }

		//role=ID (COMMA nextRole=NewRole)?
		public Group getGroup() { return cGroup; }

		//role=ID
		public Assignment getRoleAssignment_0() { return cRoleAssignment_0; }

		//ID
		public RuleCall getRoleIDTerminalRuleCall_0_0() { return cRoleIDTerminalRuleCall_0_0; }

		//(COMMA nextRole=NewRole)?
		public Group getGroup_1() { return cGroup_1; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_1_0() { return cCOMMATerminalRuleCall_1_0; }

		//nextRole=NewRole
		public Assignment getNextRoleAssignment_1_1() { return cNextRoleAssignment_1_1; }

		//NewRole
		public RuleCall getNextRoleNewRoleParserRuleCall_1_1_0() { return cNextRoleNewRoleParserRuleCall_1_1_0; }
	}

	public class WhereElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.Aioc.Where");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cWhereConditionAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cWhereConditionWhereCompareConditionParserRuleCall_0_0 = (RuleCall)cWhereConditionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cParenAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cParenLRNDTerminalRuleCall_1_0_0 = (RuleCall)cParenAssignment_1_0.eContents().get(0);
		private final Assignment cWhereConditionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cWhereConditionWhereCompareConditionParserRuleCall_1_1_0 = (RuleCall)cWhereConditionAssignment_1_1.eContents().get(0);
		private final RuleCall cRRNDTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		
		//Where:
		//	whereCondition=WhereCompareCondition
		//	| => paren?=LRND whereCondition=WhereCompareCondition RRND;
		@Override public ParserRule getRule() { return rule; }

		//whereCondition=WhereCompareCondition | => paren?=LRND whereCondition=WhereCompareCondition RRND
		public Alternatives getAlternatives() { return cAlternatives; }

		//whereCondition=WhereCompareCondition
		public Assignment getWhereConditionAssignment_0() { return cWhereConditionAssignment_0; }

		//WhereCompareCondition
		public RuleCall getWhereConditionWhereCompareConditionParserRuleCall_0_0() { return cWhereConditionWhereCompareConditionParserRuleCall_0_0; }

		//=> paren?=LRND whereCondition=WhereCompareCondition RRND
		public Group getGroup_1() { return cGroup_1; }

		//=> paren?=LRND
		public Assignment getParenAssignment_1_0() { return cParenAssignment_1_0; }

		//LRND
		public RuleCall getParenLRNDTerminalRuleCall_1_0_0() { return cParenLRNDTerminalRuleCall_1_0_0; }

		//whereCondition=WhereCompareCondition
		public Assignment getWhereConditionAssignment_1_1() { return cWhereConditionAssignment_1_1; }

		//WhereCompareCondition
		public RuleCall getWhereConditionWhereCompareConditionParserRuleCall_1_1_0() { return cWhereConditionWhereCompareConditionParserRuleCall_1_1_0; }

		//RRND
		public RuleCall getRRNDTerminalRuleCall_1_2() { return cRRNDTerminalRuleCall_1_2; }
	}

	public class WhereCompareConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.Aioc.WhereCompareCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftWhereExpressionBasicTermParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperatorConditionOperatorParserRuleCall_1_0 = (RuleCall)cOperatorAssignment_1.eContents().get(0);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightWhereExpressionBasicTermParserRuleCall_2_0 = (RuleCall)cRightAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_3_0 = (Alternatives)cGroup_3.eContents().get(0);
		private final Assignment cAndAssignment_3_0_0 = (Assignment)cAlternatives_3_0.eContents().get(0);
		private final RuleCall cAndANDTerminalRuleCall_3_0_0_0 = (RuleCall)cAndAssignment_3_0_0.eContents().get(0);
		private final Assignment cOrAssignment_3_0_1 = (Assignment)cAlternatives_3_0.eContents().get(1);
		private final RuleCall cOrORTerminalRuleCall_3_0_1_0 = (RuleCall)cOrAssignment_3_0_1.eContents().get(0);
		private final Assignment cNextAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cNextWhereParserRuleCall_3_1_0 = (RuleCall)cNextAssignment_3_1.eContents().get(0);
		
		//WhereCompareCondition:
		//	left=WhereExpressionBasicTerm operator=ConditionOperator
		//	right=WhereExpressionBasicTerm ((and?=AND | or?=OR) next=Where)?;
		@Override public ParserRule getRule() { return rule; }

		//left=WhereExpressionBasicTerm operator=ConditionOperator right=WhereExpressionBasicTerm ((and?=AND | or?=OR)
		//next=Where)?
		public Group getGroup() { return cGroup; }

		//left=WhereExpressionBasicTerm
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }

		//WhereExpressionBasicTerm
		public RuleCall getLeftWhereExpressionBasicTermParserRuleCall_0_0() { return cLeftWhereExpressionBasicTermParserRuleCall_0_0; }

		//operator=ConditionOperator
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }

		//ConditionOperator
		public RuleCall getOperatorConditionOperatorParserRuleCall_1_0() { return cOperatorConditionOperatorParserRuleCall_1_0; }

		//right=WhereExpressionBasicTerm
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }

		//WhereExpressionBasicTerm
		public RuleCall getRightWhereExpressionBasicTermParserRuleCall_2_0() { return cRightWhereExpressionBasicTermParserRuleCall_2_0; }

		//((and?=AND | or?=OR) next=Where)?
		public Group getGroup_3() { return cGroup_3; }

		//and?=AND | or?=OR
		public Alternatives getAlternatives_3_0() { return cAlternatives_3_0; }

		//and?=AND
		public Assignment getAndAssignment_3_0_0() { return cAndAssignment_3_0_0; }

		//AND
		public RuleCall getAndANDTerminalRuleCall_3_0_0_0() { return cAndANDTerminalRuleCall_3_0_0_0; }

		//or?=OR
		public Assignment getOrAssignment_3_0_1() { return cOrAssignment_3_0_1; }

		//OR
		public RuleCall getOrORTerminalRuleCall_3_0_1_0() { return cOrORTerminalRuleCall_3_0_1_0; }

		//next=Where
		public Assignment getNextAssignment_3_1() { return cNextAssignment_3_1; }

		//Where
		public RuleCall getNextWhereParserRuleCall_3_1_0() { return cNextWhereParserRuleCall_3_1_0; }
	}

	public class WhereExpressionBasicTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.Aioc.WhereExpressionBasicTerm");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cNKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNVariableAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNVariableIDTerminalRuleCall_0_1_0 = (RuleCall)cNVariableAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cEKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cEVariableAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cEVariableIDTerminalRuleCall_1_1_0 = (RuleCall)cEVariableAssignment_1_1.eContents().get(0);
		private final Assignment cSVariableAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cSVariableIDTerminalRuleCall_2_0 = (RuleCall)cSVariableAssignment_2.eContents().get(0);
		private final Assignment cConstantAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cConstantConstantParserRuleCall_3_0 = (RuleCall)cConstantAssignment_3.eContents().get(0);
		
		//WhereExpressionBasicTerm:
		//	"N." nVariable=ID
		//	| "E." eVariable=ID
		//	| sVariable=ID
		//	| constant=Constant
		//	//										| true ?= TRUE
		//	//										| false ?= FALSE
		//	//										| 
		//;
		@Override public ParserRule getRule() { return rule; }

		//"N." nVariable=ID | "E." eVariable=ID | sVariable=ID | constant=Constant
		public Alternatives getAlternatives() { return cAlternatives; }

		//"N." nVariable=ID
		public Group getGroup_0() { return cGroup_0; }

		//"N."
		public Keyword getNKeyword_0_0() { return cNKeyword_0_0; }

		//nVariable=ID
		public Assignment getNVariableAssignment_0_1() { return cNVariableAssignment_0_1; }

		//ID
		public RuleCall getNVariableIDTerminalRuleCall_0_1_0() { return cNVariableIDTerminalRuleCall_0_1_0; }

		//"E." eVariable=ID
		public Group getGroup_1() { return cGroup_1; }

		//"E."
		public Keyword getEKeyword_1_0() { return cEKeyword_1_0; }

		//eVariable=ID
		public Assignment getEVariableAssignment_1_1() { return cEVariableAssignment_1_1; }

		//ID
		public RuleCall getEVariableIDTerminalRuleCall_1_1_0() { return cEVariableIDTerminalRuleCall_1_1_0; }

		//sVariable=ID
		public Assignment getSVariableAssignment_2() { return cSVariableAssignment_2; }

		//ID
		public RuleCall getSVariableIDTerminalRuleCall_2_0() { return cSVariableIDTerminalRuleCall_2_0; }

		//constant=Constant
		public Assignment getConstantAssignment_3() { return cConstantAssignment_3; }

		//Constant
		public RuleCall getConstantConstantParserRuleCall_3_0() { return cConstantConstantParserRuleCall_3_0; }
	}

	public class PreambleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.Aioc.Preamble");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStarterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStarterAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStarterIDTerminalRuleCall_1_0 = (RuleCall)cStarterAssignment_1.eContents().get(0);
		private final Assignment cLocDefinitionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLocDefinitionLocationDefinitionParserRuleCall_2_0 = (RuleCall)cLocDefinitionAssignment_2.eContents().get(0);
		
		//Preamble:
		//	"starter:" starter=ID
		//	locDefinition=LocationDefinition?;
		@Override public ParserRule getRule() { return rule; }

		//"starter:" starter=ID locDefinition=LocationDefinition?
		public Group getGroup() { return cGroup; }

		//"starter:"
		public Keyword getStarterKeyword_0() { return cStarterKeyword_0; }

		//starter=ID
		public Assignment getStarterAssignment_1() { return cStarterAssignment_1; }

		//ID
		public RuleCall getStarterIDTerminalRuleCall_1_0() { return cStarterIDTerminalRuleCall_1_0; }

		//locDefinition=LocationDefinition?
		public Assignment getLocDefinitionAssignment_2() { return cLocDefinitionAssignment_2; }

		//LocationDefinition
		public RuleCall getLocDefinitionLocationDefinitionParserRuleCall_2_0() { return cLocDefinitionLocationDefinitionParserRuleCall_2_0; }
	}

	public class FunctionLocationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.Aioc.FunctionLocation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIncludeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFunctionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFunctionsFunctionListParserRuleCall_1_0 = (RuleCall)cFunctionsAssignment_1.eContents().get(0);
		private final Keyword cFromKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLocationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLocationSTRINGTerminalRuleCall_3_0 = (RuleCall)cLocationAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cWithKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cProtocolAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cProtocolSTRINGTerminalRuleCall_4_1_0 = (RuleCall)cProtocolAssignment_4_1.eContents().get(0);
		
		//FunctionLocation:
		//	"include" functions=FunctionList
		//	"from" location=STRING ("with" protocol=STRING)?;
		@Override public ParserRule getRule() { return rule; }

		//"include" functions=FunctionList "from" location=STRING ("with" protocol=STRING)?
		public Group getGroup() { return cGroup; }

		//"include"
		public Keyword getIncludeKeyword_0() { return cIncludeKeyword_0; }

		//functions=FunctionList
		public Assignment getFunctionsAssignment_1() { return cFunctionsAssignment_1; }

		//FunctionList
		public RuleCall getFunctionsFunctionListParserRuleCall_1_0() { return cFunctionsFunctionListParserRuleCall_1_0; }

		//"from"
		public Keyword getFromKeyword_2() { return cFromKeyword_2; }

		//location=STRING
		public Assignment getLocationAssignment_3() { return cLocationAssignment_3; }

		//STRING
		public RuleCall getLocationSTRINGTerminalRuleCall_3_0() { return cLocationSTRINGTerminalRuleCall_3_0; }

		//("with" protocol=STRING)?
		public Group getGroup_4() { return cGroup_4; }

		//"with"
		public Keyword getWithKeyword_4_0() { return cWithKeyword_4_0; }

		//protocol=STRING
		public Assignment getProtocolAssignment_4_1() { return cProtocolAssignment_4_1; }

		//STRING
		public RuleCall getProtocolSTRINGTerminalRuleCall_4_1_0() { return cProtocolSTRINGTerminalRuleCall_4_1_0; }
	}

	public class FunctionListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.Aioc.FunctionList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFunctionNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFunctionNameIDTerminalRuleCall_0_0 = (RuleCall)cFunctionNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cCOMMATerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cFunctionNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFunctionNameIDTerminalRuleCall_1_1_0 = (RuleCall)cFunctionNameAssignment_1_1.eContents().get(0);
		
		//FunctionList:
		//	functionName+=ID (COMMA functionName+=ID)*;
		@Override public ParserRule getRule() { return rule; }

		//functionName+=ID (COMMA functionName+=ID)*
		public Group getGroup() { return cGroup; }

		//functionName+=ID
		public Assignment getFunctionNameAssignment_0() { return cFunctionNameAssignment_0; }

		//ID
		public RuleCall getFunctionNameIDTerminalRuleCall_0_0() { return cFunctionNameIDTerminalRuleCall_0_0; }

		//(COMMA functionName+=ID)*
		public Group getGroup_1() { return cGroup_1; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_1_0() { return cCOMMATerminalRuleCall_1_0; }

		//functionName+=ID
		public Assignment getFunctionNameAssignment_1_1() { return cFunctionNameAssignment_1_1; }

		//ID
		public RuleCall getFunctionNameIDTerminalRuleCall_1_1_0() { return cFunctionNameIDTerminalRuleCall_1_1_0; }
	}

	public class LocationDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.Aioc.LocationDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLocationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cATTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cRoleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRoleIDTerminalRuleCall_2_0 = (RuleCall)cRoleAssignment_2.eContents().get(0);
		private final RuleCall cCOLONTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cLocationAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLocationSTRINGTerminalRuleCall_4_0 = (RuleCall)cLocationAssignment_4.eContents().get(0);
		private final Assignment cContinuationAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cContinuationLocationDefinitionParserRuleCall_5_0 = (RuleCall)cContinuationAssignment_5.eContents().get(0);
		
		//LocationDefinition:
		//	"location" AT role=ID COLON location=STRING
		//	continuation=LocationDefinition?;
		@Override public ParserRule getRule() { return rule; }

		//"location" AT role=ID COLON location=STRING continuation=LocationDefinition?
		public Group getGroup() { return cGroup; }

		//"location"
		public Keyword getLocationKeyword_0() { return cLocationKeyword_0; }

		//AT
		public RuleCall getATTerminalRuleCall_1() { return cATTerminalRuleCall_1; }

		//role=ID
		public Assignment getRoleAssignment_2() { return cRoleAssignment_2; }

		//ID
		public RuleCall getRoleIDTerminalRuleCall_2_0() { return cRoleIDTerminalRuleCall_2_0; }

		//COLON
		public RuleCall getCOLONTerminalRuleCall_3() { return cCOLONTerminalRuleCall_3; }

		//location=STRING
		public Assignment getLocationAssignment_4() { return cLocationAssignment_4; }

		//STRING
		public RuleCall getLocationSTRINGTerminalRuleCall_4_0() { return cLocationSTRINGTerminalRuleCall_4_0; }

		//continuation=LocationDefinition?
		public Assignment getContinuationAssignment_5() { return cContinuationAssignment_5; }

		//LocationDefinition
		public RuleCall getContinuationLocationDefinitionParserRuleCall_5_0() { return cContinuationLocationDefinitionParserRuleCall_5_0; }
	}

	public class ChoreographyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.Aioc.Choreography");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSeqBlockAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSeqBlockSeqBlockParserRuleCall_0_0 = (RuleCall)cSeqBlockAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cPIPETerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cParAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParChoreographyParserRuleCall_1_1_0 = (RuleCall)cParAssignment_1_1.eContents().get(0);
		
		//Choreography:
		//	seqBlock=SeqBlock (PIPE par=Choreography)?;
		@Override public ParserRule getRule() { return rule; }

		//seqBlock=SeqBlock (PIPE par=Choreography)?
		public Group getGroup() { return cGroup; }

		//seqBlock=SeqBlock
		public Assignment getSeqBlockAssignment_0() { return cSeqBlockAssignment_0; }

		//SeqBlock
		public RuleCall getSeqBlockSeqBlockParserRuleCall_0_0() { return cSeqBlockSeqBlockParserRuleCall_0_0; }

		//(PIPE par=Choreography)?
		public Group getGroup_1() { return cGroup_1; }

		//PIPE
		public RuleCall getPIPETerminalRuleCall_1_0() { return cPIPETerminalRuleCall_1_0; }

		//par=Choreography
		public Assignment getParAssignment_1_1() { return cParAssignment_1_1; }

		//Choreography
		public RuleCall getParChoreographyParserRuleCall_1_1_0() { return cParChoreographyParserRuleCall_1_1_0; }
	}

	public class SeqBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.Aioc.SeqBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEventAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cEventAlternatives_0_0 = (Alternatives)cEventAssignment_0.eContents().get(0);
		private final RuleCall cEventSkipParserRuleCall_0_0_0 = (RuleCall)cEventAlternatives_0_0.eContents().get(0);
		private final RuleCall cEventInteractionParserRuleCall_0_0_1 = (RuleCall)cEventAlternatives_0_0.eContents().get(1);
		private final RuleCall cEventLocalCodeParserRuleCall_0_0_2 = (RuleCall)cEventAlternatives_0_0.eContents().get(2);
		private final RuleCall cEventIfThenElseParserRuleCall_0_0_3 = (RuleCall)cEventAlternatives_0_0.eContents().get(3);
		private final RuleCall cEventWhileParserRuleCall_0_0_4 = (RuleCall)cEventAlternatives_0_0.eContents().get(4);
		private final RuleCall cEventScopeParserRuleCall_0_0_5 = (RuleCall)cEventAlternatives_0_0.eContents().get(5);
		private final RuleCall cEventNestedChoreographyParserRuleCall_0_0_6 = (RuleCall)cEventAlternatives_0_0.eContents().get(6);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cSEMICOLONTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cNextAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNextChoreographyParserRuleCall_1_1_0 = (RuleCall)cNextAssignment_1_1.eContents().get(0);
		
		//SeqBlock:
		//	event=(Skip | Interaction | LocalCode | IfThenElse | While | Scope | NestedChoreography) (SEMICOLON
		//	next=Choreography)?;
		@Override public ParserRule getRule() { return rule; }

		//event=(Skip | Interaction | LocalCode | IfThenElse | While | Scope | NestedChoreography) (SEMICOLON next=Choreography)?
		public Group getGroup() { return cGroup; }

		//event=(Skip | Interaction | LocalCode | IfThenElse | While | Scope | NestedChoreography)
		public Assignment getEventAssignment_0() { return cEventAssignment_0; }

		//(Skip | Interaction | LocalCode | IfThenElse | While | Scope | NestedChoreography)
		public Alternatives getEventAlternatives_0_0() { return cEventAlternatives_0_0; }

		//Skip
		public RuleCall getEventSkipParserRuleCall_0_0_0() { return cEventSkipParserRuleCall_0_0_0; }

		//Interaction
		public RuleCall getEventInteractionParserRuleCall_0_0_1() { return cEventInteractionParserRuleCall_0_0_1; }

		//LocalCode
		public RuleCall getEventLocalCodeParserRuleCall_0_0_2() { return cEventLocalCodeParserRuleCall_0_0_2; }

		//IfThenElse
		public RuleCall getEventIfThenElseParserRuleCall_0_0_3() { return cEventIfThenElseParserRuleCall_0_0_3; }

		//While
		public RuleCall getEventWhileParserRuleCall_0_0_4() { return cEventWhileParserRuleCall_0_0_4; }

		//Scope
		public RuleCall getEventScopeParserRuleCall_0_0_5() { return cEventScopeParserRuleCall_0_0_5; }

		//NestedChoreography
		public RuleCall getEventNestedChoreographyParserRuleCall_0_0_6() { return cEventNestedChoreographyParserRuleCall_0_0_6; }

		//(SEMICOLON next=Choreography)?
		public Group getGroup_1() { return cGroup_1; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_1_0() { return cSEMICOLONTerminalRuleCall_1_0; }

		//next=Choreography
		public Assignment getNextAssignment_1_1() { return cNextAssignment_1_1; }

		//Choreography
		public RuleCall getNextChoreographyParserRuleCall_1_1_0() { return cNextChoreographyParserRuleCall_1_1_0; }
	}

	public class SkipElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.Aioc.Skip");
		private final Assignment cSkipAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cSkipSkipKeyword_0 = (Keyword)cSkipAssignment.eContents().get(0);
		
		//Skip:
		//	skip?="skip";
		@Override public ParserRule getRule() { return rule; }

		//skip?="skip"
		public Assignment getSkipAssignment() { return cSkipAssignment; }

		//"skip"
		public Keyword getSkipSkipKeyword_0() { return cSkipSkipKeyword_0; }
	}

	public class InteractionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.Aioc.Interaction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperationIDTerminalRuleCall_0_0 = (RuleCall)cOperationAssignment_0.eContents().get(0);
		private final RuleCall cCOLONTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cSenderAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSenderIDTerminalRuleCall_2_0 = (RuleCall)cSenderAssignment_2.eContents().get(0);
		private final RuleCall cLRNDTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cSenderExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSenderExpressionSumExpressionParserRuleCall_4_0 = (RuleCall)cSenderExpressionAssignment_4.eContents().get(0);
		private final RuleCall cRRNDTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final RuleCall cARROWTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Assignment cReceiverAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cReceiverIDTerminalRuleCall_7_0 = (RuleCall)cReceiverAssignment_7.eContents().get(0);
		private final RuleCall cLRNDTerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		private final Assignment cReceiverVariableAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cReceiverVariableIDTerminalRuleCall_9_0 = (RuleCall)cReceiverVariableAssignment_9.eContents().get(0);
		private final RuleCall cRRNDTerminalRuleCall_10 = (RuleCall)cGroup.eContents().get(10);
		
		//Interaction:
		//	operation=ID COLON
		//	sender=ID LRND
		//	senderExpression=SumExpression?
		//	RRND ARROW
		//	receiver=ID LRND
		//	receiverVariable=ID?
		//	RRND;
		@Override public ParserRule getRule() { return rule; }

		//operation=ID COLON sender=ID LRND senderExpression=SumExpression? RRND ARROW receiver=ID LRND receiverVariable=ID? RRND
		public Group getGroup() { return cGroup; }

		//operation=ID
		public Assignment getOperationAssignment_0() { return cOperationAssignment_0; }

		//ID
		public RuleCall getOperationIDTerminalRuleCall_0_0() { return cOperationIDTerminalRuleCall_0_0; }

		//COLON
		public RuleCall getCOLONTerminalRuleCall_1() { return cCOLONTerminalRuleCall_1; }

		//sender=ID
		public Assignment getSenderAssignment_2() { return cSenderAssignment_2; }

		//ID
		public RuleCall getSenderIDTerminalRuleCall_2_0() { return cSenderIDTerminalRuleCall_2_0; }

		//LRND
		public RuleCall getLRNDTerminalRuleCall_3() { return cLRNDTerminalRuleCall_3; }

		//senderExpression=SumExpression?
		public Assignment getSenderExpressionAssignment_4() { return cSenderExpressionAssignment_4; }

		//SumExpression
		public RuleCall getSenderExpressionSumExpressionParserRuleCall_4_0() { return cSenderExpressionSumExpressionParserRuleCall_4_0; }

		//RRND
		public RuleCall getRRNDTerminalRuleCall_5() { return cRRNDTerminalRuleCall_5; }

		//ARROW
		public RuleCall getARROWTerminalRuleCall_6() { return cARROWTerminalRuleCall_6; }

		//receiver=ID
		public Assignment getReceiverAssignment_7() { return cReceiverAssignment_7; }

		//ID
		public RuleCall getReceiverIDTerminalRuleCall_7_0() { return cReceiverIDTerminalRuleCall_7_0; }

		//LRND
		public RuleCall getLRNDTerminalRuleCall_8() { return cLRNDTerminalRuleCall_8; }

		//receiverVariable=ID?
		public Assignment getReceiverVariableAssignment_9() { return cReceiverVariableAssignment_9; }

		//ID
		public RuleCall getReceiverVariableIDTerminalRuleCall_9_0() { return cReceiverVariableIDTerminalRuleCall_9_0; }

		//RRND
		public RuleCall getRRNDTerminalRuleCall_10() { return cRRNDTerminalRuleCall_10; }
	}

	public class LocalCodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.Aioc.LocalCode");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cLocalAskCommandAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cResultVariableAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cResultVariableIDTerminalRuleCall_0_1_0 = (RuleCall)cResultVariableAssignment_0_1.eContents().get(0);
		private final RuleCall cATTerminalRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Assignment cThreadAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cThreadIDTerminalRuleCall_0_3_0 = (RuleCall)cThreadAssignment_0_3.eContents().get(0);
		private final RuleCall cASSIGNTerminalRuleCall_0_4 = (RuleCall)cGroup_0.eContents().get(4);
		private final Keyword cGetInputKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final RuleCall cLRNDTerminalRuleCall_0_6 = (RuleCall)cGroup_0.eContents().get(6);
		private final Assignment cQuestionAssignment_0_7 = (Assignment)cGroup_0.eContents().get(7);
		private final RuleCall cQuestionExpressionParserRuleCall_0_7_0 = (RuleCall)cQuestionAssignment_0_7.eContents().get(0);
		private final RuleCall cRRNDTerminalRuleCall_0_8 = (RuleCall)cGroup_0.eContents().get(8);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cLocalShowCommandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cVariableAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cVariableIDTerminalRuleCall_1_1_0 = (RuleCall)cVariableAssignment_1_1.eContents().get(0);
		private final RuleCall cATTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Assignment cThreadAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cThreadIDTerminalRuleCall_1_3_0 = (RuleCall)cThreadAssignment_1_3.eContents().get(0);
		private final RuleCall cASSIGNTerminalRuleCall_1_4 = (RuleCall)cGroup_1.eContents().get(4);
		private final Keyword cShowKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final RuleCall cLRNDTerminalRuleCall_1_6 = (RuleCall)cGroup_1.eContents().get(6);
		private final Assignment cExpressionAssignment_1_7 = (Assignment)cGroup_1.eContents().get(7);
		private final RuleCall cExpressionExpressionParserRuleCall_1_7_0 = (RuleCall)cExpressionAssignment_1_7.eContents().get(0);
		private final RuleCall cRRNDTerminalRuleCall_1_8 = (RuleCall)cGroup_1.eContents().get(8);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cLocalAssignmentCommandAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cVariableAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cVariableIDTerminalRuleCall_2_1_0 = (RuleCall)cVariableAssignment_2_1.eContents().get(0);
		private final RuleCall cATTerminalRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		private final Assignment cThreadAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cThreadIDTerminalRuleCall_2_3_0 = (RuleCall)cThreadAssignment_2_3.eContents().get(0);
		private final RuleCall cASSIGNTerminalRuleCall_2_4 = (RuleCall)cGroup_2.eContents().get(4);
		private final Alternatives cAlternatives_2_5 = (Alternatives)cGroup_2.eContents().get(5);
		private final Assignment cExpressionAssignment_2_5_0 = (Assignment)cAlternatives_2_5.eContents().get(0);
		private final RuleCall cExpressionExpressionParserRuleCall_2_5_0_0 = (RuleCall)cExpressionAssignment_2_5_0.eContents().get(0);
		private final Assignment cFunctionAssignment_2_5_1 = (Assignment)cAlternatives_2_5.eContents().get(1);
		private final RuleCall cFunctionFunctionParserRuleCall_2_5_1_0 = (RuleCall)cFunctionAssignment_2_5_1.eContents().get(0);
		
		//// Local thread code
		//LocalCode:
		//	{LocalAskCommand} resultVariable=ID AT thread=ID ASSIGN "getInput" LRND question=Expression RRND
		//	| {LocalShowCommand} variable=ID AT thread=ID ASSIGN "show" LRND expression=Expression RRND
		//	| {LocalAssignmentCommand} variable=ID AT thread=ID ASSIGN (expression=Expression | function=Function);
		@Override public ParserRule getRule() { return rule; }

		//{LocalAskCommand} resultVariable=ID AT thread=ID ASSIGN "getInput" LRND question=Expression RRND | {LocalShowCommand}
		//variable=ID AT thread=ID ASSIGN "show" LRND expression=Expression RRND | {LocalAssignmentCommand} variable=ID AT
		//thread=ID ASSIGN (expression=Expression | function=Function)
		public Alternatives getAlternatives() { return cAlternatives; }

		//{LocalAskCommand} resultVariable=ID AT thread=ID ASSIGN "getInput" LRND question=Expression RRND
		public Group getGroup_0() { return cGroup_0; }

		//{LocalAskCommand}
		public Action getLocalAskCommandAction_0_0() { return cLocalAskCommandAction_0_0; }

		//resultVariable=ID
		public Assignment getResultVariableAssignment_0_1() { return cResultVariableAssignment_0_1; }

		//ID
		public RuleCall getResultVariableIDTerminalRuleCall_0_1_0() { return cResultVariableIDTerminalRuleCall_0_1_0; }

		//AT
		public RuleCall getATTerminalRuleCall_0_2() { return cATTerminalRuleCall_0_2; }

		//thread=ID
		public Assignment getThreadAssignment_0_3() { return cThreadAssignment_0_3; }

		//ID
		public RuleCall getThreadIDTerminalRuleCall_0_3_0() { return cThreadIDTerminalRuleCall_0_3_0; }

		//ASSIGN
		public RuleCall getASSIGNTerminalRuleCall_0_4() { return cASSIGNTerminalRuleCall_0_4; }

		//"getInput"
		public Keyword getGetInputKeyword_0_5() { return cGetInputKeyword_0_5; }

		//LRND
		public RuleCall getLRNDTerminalRuleCall_0_6() { return cLRNDTerminalRuleCall_0_6; }

		//question=Expression
		public Assignment getQuestionAssignment_0_7() { return cQuestionAssignment_0_7; }

		//Expression
		public RuleCall getQuestionExpressionParserRuleCall_0_7_0() { return cQuestionExpressionParserRuleCall_0_7_0; }

		//RRND
		public RuleCall getRRNDTerminalRuleCall_0_8() { return cRRNDTerminalRuleCall_0_8; }

		//{LocalShowCommand} variable=ID AT thread=ID ASSIGN "show" LRND expression=Expression RRND
		public Group getGroup_1() { return cGroup_1; }

		//{LocalShowCommand}
		public Action getLocalShowCommandAction_1_0() { return cLocalShowCommandAction_1_0; }

		//variable=ID
		public Assignment getVariableAssignment_1_1() { return cVariableAssignment_1_1; }

		//ID
		public RuleCall getVariableIDTerminalRuleCall_1_1_0() { return cVariableIDTerminalRuleCall_1_1_0; }

		//AT
		public RuleCall getATTerminalRuleCall_1_2() { return cATTerminalRuleCall_1_2; }

		//thread=ID
		public Assignment getThreadAssignment_1_3() { return cThreadAssignment_1_3; }

		//ID
		public RuleCall getThreadIDTerminalRuleCall_1_3_0() { return cThreadIDTerminalRuleCall_1_3_0; }

		//ASSIGN
		public RuleCall getASSIGNTerminalRuleCall_1_4() { return cASSIGNTerminalRuleCall_1_4; }

		//"show"
		public Keyword getShowKeyword_1_5() { return cShowKeyword_1_5; }

		//LRND
		public RuleCall getLRNDTerminalRuleCall_1_6() { return cLRNDTerminalRuleCall_1_6; }

		//expression=Expression
		public Assignment getExpressionAssignment_1_7() { return cExpressionAssignment_1_7; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_7_0() { return cExpressionExpressionParserRuleCall_1_7_0; }

		//RRND
		public RuleCall getRRNDTerminalRuleCall_1_8() { return cRRNDTerminalRuleCall_1_8; }

		//{LocalAssignmentCommand} variable=ID AT thread=ID ASSIGN (expression=Expression | function=Function)
		public Group getGroup_2() { return cGroup_2; }

		//{LocalAssignmentCommand}
		public Action getLocalAssignmentCommandAction_2_0() { return cLocalAssignmentCommandAction_2_0; }

		//variable=ID
		public Assignment getVariableAssignment_2_1() { return cVariableAssignment_2_1; }

		//ID
		public RuleCall getVariableIDTerminalRuleCall_2_1_0() { return cVariableIDTerminalRuleCall_2_1_0; }

		//AT
		public RuleCall getATTerminalRuleCall_2_2() { return cATTerminalRuleCall_2_2; }

		//thread=ID
		public Assignment getThreadAssignment_2_3() { return cThreadAssignment_2_3; }

		//ID
		public RuleCall getThreadIDTerminalRuleCall_2_3_0() { return cThreadIDTerminalRuleCall_2_3_0; }

		//ASSIGN
		public RuleCall getASSIGNTerminalRuleCall_2_4() { return cASSIGNTerminalRuleCall_2_4; }

		//expression=Expression | function=Function
		public Alternatives getAlternatives_2_5() { return cAlternatives_2_5; }

		//expression=Expression
		public Assignment getExpressionAssignment_2_5_0() { return cExpressionAssignment_2_5_0; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_5_0_0() { return cExpressionExpressionParserRuleCall_2_5_0_0; }

		//function=Function
		public Assignment getFunctionAssignment_2_5_1() { return cFunctionAssignment_2_5_1; }

		//Function
		public RuleCall getFunctionFunctionParserRuleCall_2_5_1_0() { return cFunctionFunctionParserRuleCall_2_5_1_0; }
	}

	public class IfThenElseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.Aioc.IfThenElse");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cKeyAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cKeyIDTerminalRuleCall_0_0_0 = (RuleCall)cKeyAssignment_0_0.eContents().get(0);
		private final RuleCall cCOLONTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cIfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cLRNDTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cConditionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConditionConditionParserRuleCall_3_0 = (RuleCall)cConditionAssignment_3.eContents().get(0);
		private final RuleCall cRRNDTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cATTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Assignment cThreadAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cThreadIDTerminalRuleCall_6_0 = (RuleCall)cThreadAssignment_6.eContents().get(0);
		private final RuleCall cLCURLYTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Assignment cThenAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cThenChoreographyParserRuleCall_8_0 = (RuleCall)cThenAssignment_8.eContents().get(0);
		private final RuleCall cRCURLYTerminalRuleCall_9 = (RuleCall)cGroup.eContents().get(9);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cElseKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final RuleCall cLCURLYTerminalRuleCall_10_1 = (RuleCall)cGroup_10.eContents().get(1);
		private final Assignment cElseAssignment_10_2 = (Assignment)cGroup_10.eContents().get(2);
		private final RuleCall cElseChoreographyParserRuleCall_10_2_0 = (RuleCall)cElseAssignment_10_2.eContents().get(0);
		private final RuleCall cRCURLYTerminalRuleCall_10_3 = (RuleCall)cGroup_10.eContents().get(3);
		
		///**
		// * if (condition)@thread { Choreography } else { Choreography }
		// */ IfThenElse:
		//	(key=ID COLON)? 'if' LRND condition=Condition RRND AT thread=ID
		//	LCURLY then=Choreography RCURLY ('else' LCURLY else=Choreography RCURLY)?;
		@Override public ParserRule getRule() { return rule; }

		//(key=ID COLON)? 'if' LRND condition=Condition RRND AT thread=ID LCURLY then=Choreography RCURLY ('else' LCURLY
		//else=Choreography RCURLY)?
		public Group getGroup() { return cGroup; }

		//(key=ID COLON)?
		public Group getGroup_0() { return cGroup_0; }

		//key=ID
		public Assignment getKeyAssignment_0_0() { return cKeyAssignment_0_0; }

		//ID
		public RuleCall getKeyIDTerminalRuleCall_0_0_0() { return cKeyIDTerminalRuleCall_0_0_0; }

		//COLON
		public RuleCall getCOLONTerminalRuleCall_0_1() { return cCOLONTerminalRuleCall_0_1; }

		//'if'
		public Keyword getIfKeyword_1() { return cIfKeyword_1; }

		//LRND
		public RuleCall getLRNDTerminalRuleCall_2() { return cLRNDTerminalRuleCall_2; }

		//condition=Condition
		public Assignment getConditionAssignment_3() { return cConditionAssignment_3; }

		//Condition
		public RuleCall getConditionConditionParserRuleCall_3_0() { return cConditionConditionParserRuleCall_3_0; }

		//RRND
		public RuleCall getRRNDTerminalRuleCall_4() { return cRRNDTerminalRuleCall_4; }

		//AT
		public RuleCall getATTerminalRuleCall_5() { return cATTerminalRuleCall_5; }

		//thread=ID
		public Assignment getThreadAssignment_6() { return cThreadAssignment_6; }

		//ID
		public RuleCall getThreadIDTerminalRuleCall_6_0() { return cThreadIDTerminalRuleCall_6_0; }

		//LCURLY
		public RuleCall getLCURLYTerminalRuleCall_7() { return cLCURLYTerminalRuleCall_7; }

		//then=Choreography
		public Assignment getThenAssignment_8() { return cThenAssignment_8; }

		//Choreography
		public RuleCall getThenChoreographyParserRuleCall_8_0() { return cThenChoreographyParserRuleCall_8_0; }

		//RCURLY
		public RuleCall getRCURLYTerminalRuleCall_9() { return cRCURLYTerminalRuleCall_9; }

		//('else' LCURLY else=Choreography RCURLY)?
		public Group getGroup_10() { return cGroup_10; }

		//'else'
		public Keyword getElseKeyword_10_0() { return cElseKeyword_10_0; }

		//LCURLY
		public RuleCall getLCURLYTerminalRuleCall_10_1() { return cLCURLYTerminalRuleCall_10_1; }

		//else=Choreography
		public Assignment getElseAssignment_10_2() { return cElseAssignment_10_2; }

		//Choreography
		public RuleCall getElseChoreographyParserRuleCall_10_2_0() { return cElseChoreographyParserRuleCall_10_2_0; }

		//RCURLY
		public RuleCall getRCURLYTerminalRuleCall_10_3() { return cRCURLYTerminalRuleCall_10_3; }
	}

	public class WhileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.Aioc.While");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLRNDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionConditionParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final RuleCall cRRNDTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cATTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cThreadAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cThreadIDTerminalRuleCall_5_0 = (RuleCall)cThreadAssignment_5.eContents().get(0);
		private final RuleCall cLCURLYTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Assignment cChoreographyAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cChoreographyChoreographyParserRuleCall_7_0 = (RuleCall)cChoreographyAssignment_7.eContents().get(0);
		private final RuleCall cRCURLYTerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final RuleCall cLCURLYTerminalRuleCall_9_0 = (RuleCall)cGroup_9.eContents().get(0);
		private final Assignment cKeyAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cKeyIDTerminalRuleCall_9_1_0 = (RuleCall)cKeyAssignment_9_1.eContents().get(0);
		private final RuleCall cRCURLYTerminalRuleCall_9_2 = (RuleCall)cGroup_9.eContents().get(2);
		
		///*
		// * while (condition)@thread { Choreography }
		// */ While:
		//	'while' LRND condition=Condition RRND AT thread=ID
		//	LCURLY choreography=Choreography RCURLY (LCURLY key=ID RCURLY)?;
		@Override public ParserRule getRule() { return rule; }

		//'while' LRND condition=Condition RRND AT thread=ID LCURLY choreography=Choreography RCURLY (LCURLY key=ID RCURLY)?
		public Group getGroup() { return cGroup; }

		//'while'
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }

		//LRND
		public RuleCall getLRNDTerminalRuleCall_1() { return cLRNDTerminalRuleCall_1; }

		//condition=Condition
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }

		//Condition
		public RuleCall getConditionConditionParserRuleCall_2_0() { return cConditionConditionParserRuleCall_2_0; }

		//RRND
		public RuleCall getRRNDTerminalRuleCall_3() { return cRRNDTerminalRuleCall_3; }

		//AT
		public RuleCall getATTerminalRuleCall_4() { return cATTerminalRuleCall_4; }

		//thread=ID
		public Assignment getThreadAssignment_5() { return cThreadAssignment_5; }

		//ID
		public RuleCall getThreadIDTerminalRuleCall_5_0() { return cThreadIDTerminalRuleCall_5_0; }

		//LCURLY
		public RuleCall getLCURLYTerminalRuleCall_6() { return cLCURLYTerminalRuleCall_6; }

		//choreography=Choreography
		public Assignment getChoreographyAssignment_7() { return cChoreographyAssignment_7; }

		//Choreography
		public RuleCall getChoreographyChoreographyParserRuleCall_7_0() { return cChoreographyChoreographyParserRuleCall_7_0; }

		//RCURLY
		public RuleCall getRCURLYTerminalRuleCall_8() { return cRCURLYTerminalRuleCall_8; }

		//(LCURLY key=ID RCURLY)?
		public Group getGroup_9() { return cGroup_9; }

		//LCURLY
		public RuleCall getLCURLYTerminalRuleCall_9_0() { return cLCURLYTerminalRuleCall_9_0; }

		//key=ID
		public Assignment getKeyAssignment_9_1() { return cKeyAssignment_9_1; }

		//ID
		public RuleCall getKeyIDTerminalRuleCall_9_1_0() { return cKeyIDTerminalRuleCall_9_1_0; }

		//RCURLY
		public RuleCall getRCURLYTerminalRuleCall_9_2() { return cRCURLYTerminalRuleCall_9_2; }
	}

	public class ScopeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.Aioc.Scope");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScopeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cATTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cThreadAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cThreadIDTerminalRuleCall_2_0 = (RuleCall)cThreadAssignment_2.eContents().get(0);
		private final RuleCall cLCURLYTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cChoreographyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cChoreographyChoreographyParserRuleCall_4_0 = (RuleCall)cChoreographyAssignment_4.eContents().get(0);
		private final RuleCall cRCURLYTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cPropKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final RuleCall cLCURLYTerminalRuleCall_6_1 = (RuleCall)cGroup_6.eContents().get(1);
		private final Assignment cPropertiesAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cPropertiesAssignmentSetParserRuleCall_6_2_0 = (RuleCall)cPropertiesAssignment_6_2.eContents().get(0);
		private final RuleCall cRCURLYTerminalRuleCall_6_3 = (RuleCall)cGroup_6.eContents().get(3);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cRolesKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final RuleCall cLCURLYTerminalRuleCall_7_1 = (RuleCall)cGroup_7.eContents().get(1);
		private final Assignment cRolesAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cRolesRolesParserRuleCall_7_2_0 = (RuleCall)cRolesAssignment_7_2.eContents().get(0);
		private final RuleCall cRCURLYTerminalRuleCall_7_3 = (RuleCall)cGroup_7.eContents().get(3);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final RuleCall cLCURLYTerminalRuleCall_8_0 = (RuleCall)cGroup_8.eContents().get(0);
		private final Assignment cKeyAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cKeyIDTerminalRuleCall_8_1_0 = (RuleCall)cKeyAssignment_8_1.eContents().get(0);
		private final RuleCall cRCURLYTerminalRuleCall_8_2 = (RuleCall)cGroup_8.eContents().get(2);
		
		////Scope code
		//Scope:
		//	'scope' AT thread=ID
		//	LCURLY choreography=Choreography RCURLY ('prop' LCURLY properties=AssignmentSet RCURLY)? ('roles' LCURLY roles=Roles
		//	RCURLY)? (LCURLY key=ID RCURLY)?;
		@Override public ParserRule getRule() { return rule; }

		//'scope' AT thread=ID LCURLY choreography=Choreography RCURLY ('prop' LCURLY properties=AssignmentSet RCURLY)? ('roles'
		//LCURLY roles=Roles RCURLY)? (LCURLY key=ID RCURLY)?
		public Group getGroup() { return cGroup; }

		//'scope'
		public Keyword getScopeKeyword_0() { return cScopeKeyword_0; }

		//AT
		public RuleCall getATTerminalRuleCall_1() { return cATTerminalRuleCall_1; }

		//thread=ID
		public Assignment getThreadAssignment_2() { return cThreadAssignment_2; }

		//ID
		public RuleCall getThreadIDTerminalRuleCall_2_0() { return cThreadIDTerminalRuleCall_2_0; }

		//LCURLY
		public RuleCall getLCURLYTerminalRuleCall_3() { return cLCURLYTerminalRuleCall_3; }

		//choreography=Choreography
		public Assignment getChoreographyAssignment_4() { return cChoreographyAssignment_4; }

		//Choreography
		public RuleCall getChoreographyChoreographyParserRuleCall_4_0() { return cChoreographyChoreographyParserRuleCall_4_0; }

		//RCURLY
		public RuleCall getRCURLYTerminalRuleCall_5() { return cRCURLYTerminalRuleCall_5; }

		//('prop' LCURLY properties=AssignmentSet RCURLY)?
		public Group getGroup_6() { return cGroup_6; }

		//'prop'
		public Keyword getPropKeyword_6_0() { return cPropKeyword_6_0; }

		//LCURLY
		public RuleCall getLCURLYTerminalRuleCall_6_1() { return cLCURLYTerminalRuleCall_6_1; }

		//properties=AssignmentSet
		public Assignment getPropertiesAssignment_6_2() { return cPropertiesAssignment_6_2; }

		//AssignmentSet
		public RuleCall getPropertiesAssignmentSetParserRuleCall_6_2_0() { return cPropertiesAssignmentSetParserRuleCall_6_2_0; }

		//RCURLY
		public RuleCall getRCURLYTerminalRuleCall_6_3() { return cRCURLYTerminalRuleCall_6_3; }

		//('roles' LCURLY roles=Roles RCURLY)?
		public Group getGroup_7() { return cGroup_7; }

		//'roles'
		public Keyword getRolesKeyword_7_0() { return cRolesKeyword_7_0; }

		//LCURLY
		public RuleCall getLCURLYTerminalRuleCall_7_1() { return cLCURLYTerminalRuleCall_7_1; }

		//roles=Roles
		public Assignment getRolesAssignment_7_2() { return cRolesAssignment_7_2; }

		//Roles
		public RuleCall getRolesRolesParserRuleCall_7_2_0() { return cRolesRolesParserRuleCall_7_2_0; }

		//RCURLY
		public RuleCall getRCURLYTerminalRuleCall_7_3() { return cRCURLYTerminalRuleCall_7_3; }

		//(LCURLY key=ID RCURLY)?
		public Group getGroup_8() { return cGroup_8; }

		//LCURLY
		public RuleCall getLCURLYTerminalRuleCall_8_0() { return cLCURLYTerminalRuleCall_8_0; }

		//key=ID
		public Assignment getKeyAssignment_8_1() { return cKeyAssignment_8_1; }

		//ID
		public RuleCall getKeyIDTerminalRuleCall_8_1_0() { return cKeyIDTerminalRuleCall_8_1_0; }

		//RCURLY
		public RuleCall getRCURLYTerminalRuleCall_8_2() { return cRCURLYTerminalRuleCall_8_2; }
	}

	public class RolesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.Aioc.Roles");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRolesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRolesIDTerminalRuleCall_0_0 = (RuleCall)cRolesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cCOMMATerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cRolesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRolesIDTerminalRuleCall_1_1_0 = (RuleCall)cRolesAssignment_1_1.eContents().get(0);
		
		//Roles:
		//	roles+=ID (COMMA roles+=ID)*;
		@Override public ParserRule getRule() { return rule; }

		//roles+=ID (COMMA roles+=ID)*
		public Group getGroup() { return cGroup; }

		//roles+=ID
		public Assignment getRolesAssignment_0() { return cRolesAssignment_0; }

		//ID
		public RuleCall getRolesIDTerminalRuleCall_0_0() { return cRolesIDTerminalRuleCall_0_0; }

		//(COMMA roles+=ID)*
		public Group getGroup_1() { return cGroup_1; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_1_0() { return cCOMMATerminalRuleCall_1_0; }

		//roles+=ID
		public Assignment getRolesAssignment_1_1() { return cRolesAssignment_1_1; }

		//ID
		public RuleCall getRolesIDTerminalRuleCall_1_1_0() { return cRolesIDTerminalRuleCall_1_1_0; }
	}

	public class NestedChoreographyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.Aioc.NestedChoreography");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLCURLYTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cChoreographyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cChoreographyChoreographyParserRuleCall_1_0 = (RuleCall)cChoreographyAssignment_1.eContents().get(0);
		private final RuleCall cRCURLYTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		////nested Choreography code
		//NestedChoreography:
		//	LCURLY
		//	choreography=Choreography
		//	RCURLY;
		@Override public ParserRule getRule() { return rule; }

		//LCURLY choreography=Choreography RCURLY
		public Group getGroup() { return cGroup; }

		//LCURLY
		public RuleCall getLCURLYTerminalRuleCall_0() { return cLCURLYTerminalRuleCall_0; }

		//choreography=Choreography
		public Assignment getChoreographyAssignment_1() { return cChoreographyAssignment_1; }

		//Choreography
		public RuleCall getChoreographyChoreographyParserRuleCall_1_0() { return cChoreographyChoreographyParserRuleCall_1_0; }

		//RCURLY
		public RuleCall getRCURLYTerminalRuleCall_2() { return cRCURLYTerminalRuleCall_2; }
	}

	public class AssignmentSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.Aioc.AssignmentSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAssignmentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAssignmentAssignmentParserRuleCall_0_0 = (RuleCall)cAssignmentAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cCOMMATerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cContinuationAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cContinuationAssignmentSetParserRuleCall_1_1_0 = (RuleCall)cContinuationAssignment_1_1.eContents().get(0);
		
		///*** Assignment ***/ AssignmentSet:
		//	assignment=Assignment (COMMA continuation=AssignmentSet)?;
		@Override public ParserRule getRule() { return rule; }

		//assignment=Assignment (COMMA continuation=AssignmentSet)?
		public Group getGroup() { return cGroup; }

		//assignment=Assignment
		public Assignment getAssignmentAssignment_0() { return cAssignmentAssignment_0; }

		//Assignment
		public RuleCall getAssignmentAssignmentParserRuleCall_0_0() { return cAssignmentAssignmentParserRuleCall_0_0; }

		//(COMMA continuation=AssignmentSet)?
		public Group getGroup_1() { return cGroup_1; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_1_0() { return cCOMMATerminalRuleCall_1_0; }

		//continuation=AssignmentSet
		public Assignment getContinuationAssignment_1_1() { return cContinuationAssignment_1_1; }

		//AssignmentSet
		public RuleCall getContinuationAssignmentSetParserRuleCall_1_1_0() { return cContinuationAssignmentSetParserRuleCall_1_1_0; }
	}

	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.Aioc.Assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariableIDTerminalRuleCall_1_0 = (RuleCall)cVariableAssignment_1.eContents().get(0);
		private final RuleCall cASSIGNTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		
		//Assignment:
		//	"N." variable=ID ASSIGN expression=Expression;
		@Override public ParserRule getRule() { return rule; }

		//"N." variable=ID ASSIGN expression=Expression
		public Group getGroup() { return cGroup; }

		//"N."
		public Keyword getNKeyword_0() { return cNKeyword_0; }

		//variable=ID
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }

		//ID
		public RuleCall getVariableIDTerminalRuleCall_1_0() { return cVariableIDTerminalRuleCall_1_0; }

		//ASSIGN
		public RuleCall getASSIGNTerminalRuleCall_2() { return cASSIGNTerminalRuleCall_2; }

		//expression=Expression
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_3_0() { return cExpressionExpressionParserRuleCall_3_0; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.Aioc.Expression");
		private final Assignment cSumExpressionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cSumExpressionSumExpressionParserRuleCall_0 = (RuleCall)cSumExpressionAssignment.eContents().get(0);
		
		///*** Expressions and conditions ***/ Expression:
		//	sumExpression=SumExpression;
		@Override public ParserRule getRule() { return rule; }

		//sumExpression=SumExpression
		public Assignment getSumExpressionAssignment() { return cSumExpressionAssignment; }

		//SumExpression
		public RuleCall getSumExpressionSumExpressionParserRuleCall_0() { return cSumExpressionSumExpressionParserRuleCall_0; }
	}

	public class SumExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.Aioc.SumExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cChildrenAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cChildrenExpressionBasicTermParserRuleCall_0_0 = (RuleCall)cChildrenAssignment_0.eContents().get(0);
		private final Assignment cChildrenAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cChildrenSumExpressionTermParserRuleCall_1_0 = (RuleCall)cChildrenAssignment_1.eContents().get(0);
		
		//SumExpression:
		//	children+=ExpressionBasicTerm children+=SumExpressionTerm*;
		@Override public ParserRule getRule() { return rule; }

		//children+=ExpressionBasicTerm children+=SumExpressionTerm*
		public Group getGroup() { return cGroup; }

		//children+=ExpressionBasicTerm
		public Assignment getChildrenAssignment_0() { return cChildrenAssignment_0; }

		//ExpressionBasicTerm
		public RuleCall getChildrenExpressionBasicTermParserRuleCall_0_0() { return cChildrenExpressionBasicTermParserRuleCall_0_0; }

		//children+=SumExpressionTerm*
		public Assignment getChildrenAssignment_1() { return cChildrenAssignment_1; }

		//SumExpressionTerm
		public RuleCall getChildrenSumExpressionTermParserRuleCall_1_0() { return cChildrenSumExpressionTermParserRuleCall_1_0; }
	}

	public class SumExpressionTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.Aioc.SumExpressionTerm");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cSumExpressionAddTermAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final RuleCall cPLUSTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Assignment cExpressionAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cExpressionExpressionBasicTermParserRuleCall_0_2_0 = (RuleCall)cExpressionAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cSumExpressionSubtractTermAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cMINUSTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionExpressionBasicTermParserRuleCall_1_2_0 = (RuleCall)cExpressionAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cSumExpressionTimesTermAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final RuleCall cTIMESTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Assignment cExpressionAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cExpressionExpressionBasicTermParserRuleCall_2_2_0 = (RuleCall)cExpressionAssignment_2_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cSumExpressionDivideTermAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final RuleCall cSLASHTerminalRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Assignment cExpressionAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cExpressionExpressionBasicTermParserRuleCall_3_2_0 = (RuleCall)cExpressionAssignment_3_2.eContents().get(0);
		
		//SumExpressionTerm:
		//	{SumExpressionAddTerm} PLUS expression=ExpressionBasicTerm
		//	| {SumExpressionSubtractTerm} MINUS expression=ExpressionBasicTerm
		//	| {SumExpressionTimesTerm} TIMES expression=ExpressionBasicTerm
		//	| {SumExpressionDivideTerm} SLASH expression=ExpressionBasicTerm;
		@Override public ParserRule getRule() { return rule; }

		//{SumExpressionAddTerm} PLUS expression=ExpressionBasicTerm | {SumExpressionSubtractTerm} MINUS
		//expression=ExpressionBasicTerm | {SumExpressionTimesTerm} TIMES expression=ExpressionBasicTerm |
		//{SumExpressionDivideTerm} SLASH expression=ExpressionBasicTerm
		public Alternatives getAlternatives() { return cAlternatives; }

		//{SumExpressionAddTerm} PLUS expression=ExpressionBasicTerm
		public Group getGroup_0() { return cGroup_0; }

		//{SumExpressionAddTerm}
		public Action getSumExpressionAddTermAction_0_0() { return cSumExpressionAddTermAction_0_0; }

		//PLUS
		public RuleCall getPLUSTerminalRuleCall_0_1() { return cPLUSTerminalRuleCall_0_1; }

		//expression=ExpressionBasicTerm
		public Assignment getExpressionAssignment_0_2() { return cExpressionAssignment_0_2; }

		//ExpressionBasicTerm
		public RuleCall getExpressionExpressionBasicTermParserRuleCall_0_2_0() { return cExpressionExpressionBasicTermParserRuleCall_0_2_0; }

		//{SumExpressionSubtractTerm} MINUS expression=ExpressionBasicTerm
		public Group getGroup_1() { return cGroup_1; }

		//{SumExpressionSubtractTerm}
		public Action getSumExpressionSubtractTermAction_1_0() { return cSumExpressionSubtractTermAction_1_0; }

		//MINUS
		public RuleCall getMINUSTerminalRuleCall_1_1() { return cMINUSTerminalRuleCall_1_1; }

		//expression=ExpressionBasicTerm
		public Assignment getExpressionAssignment_1_2() { return cExpressionAssignment_1_2; }

		//ExpressionBasicTerm
		public RuleCall getExpressionExpressionBasicTermParserRuleCall_1_2_0() { return cExpressionExpressionBasicTermParserRuleCall_1_2_0; }

		//{SumExpressionTimesTerm} TIMES expression=ExpressionBasicTerm
		public Group getGroup_2() { return cGroup_2; }

		//{SumExpressionTimesTerm}
		public Action getSumExpressionTimesTermAction_2_0() { return cSumExpressionTimesTermAction_2_0; }

		//TIMES
		public RuleCall getTIMESTerminalRuleCall_2_1() { return cTIMESTerminalRuleCall_2_1; }

		//expression=ExpressionBasicTerm
		public Assignment getExpressionAssignment_2_2() { return cExpressionAssignment_2_2; }

		//ExpressionBasicTerm
		public RuleCall getExpressionExpressionBasicTermParserRuleCall_2_2_0() { return cExpressionExpressionBasicTermParserRuleCall_2_2_0; }

		//{SumExpressionDivideTerm} SLASH expression=ExpressionBasicTerm
		public Group getGroup_3() { return cGroup_3; }

		//{SumExpressionDivideTerm}
		public Action getSumExpressionDivideTermAction_3_0() { return cSumExpressionDivideTermAction_3_0; }

		//SLASH
		public RuleCall getSLASHTerminalRuleCall_3_1() { return cSLASHTerminalRuleCall_3_1; }

		//expression=ExpressionBasicTerm
		public Assignment getExpressionAssignment_3_2() { return cExpressionAssignment_3_2; }

		//ExpressionBasicTerm
		public RuleCall getExpressionExpressionBasicTermParserRuleCall_3_2_0() { return cExpressionExpressionBasicTermParserRuleCall_3_2_0; }
	}

	public class ExpressionBasicTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.Aioc.ExpressionBasicTerm");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cNotAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNotNOTTerminalRuleCall_0_0_0 = (RuleCall)cNotAssignment_0_0.eContents().get(0);
		private final Assignment cVariableAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cVariableIDTerminalRuleCall_0_1_0 = (RuleCall)cVariableAssignment_0_1.eContents().get(0);
		private final Assignment cConstantAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cConstantConstantParserRuleCall_1_0 = (RuleCall)cConstantAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cLRNDTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cConditionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cConditionConditionParserRuleCall_2_1_0 = (RuleCall)cConditionAssignment_2_1.eContents().get(0);
		private final RuleCall cRRNDTerminalRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		
		//ExpressionBasicTerm:
		//	not?=NOT? variable=ID | constant=Constant | LRND condition=Condition RRND;
		@Override public ParserRule getRule() { return rule; }

		//not?=NOT? variable=ID | constant=Constant | LRND condition=Condition RRND
		public Alternatives getAlternatives() { return cAlternatives; }

		//not?=NOT? variable=ID
		public Group getGroup_0() { return cGroup_0; }

		//not?=NOT?
		public Assignment getNotAssignment_0_0() { return cNotAssignment_0_0; }

		//NOT
		public RuleCall getNotNOTTerminalRuleCall_0_0_0() { return cNotNOTTerminalRuleCall_0_0_0; }

		//variable=ID
		public Assignment getVariableAssignment_0_1() { return cVariableAssignment_0_1; }

		//ID
		public RuleCall getVariableIDTerminalRuleCall_0_1_0() { return cVariableIDTerminalRuleCall_0_1_0; }

		//constant=Constant
		public Assignment getConstantAssignment_1() { return cConstantAssignment_1; }

		//Constant
		public RuleCall getConstantConstantParserRuleCall_1_0() { return cConstantConstantParserRuleCall_1_0; }

		////	LRND expression = Expression RRND
		//LRND condition=Condition RRND
		public Group getGroup_2() { return cGroup_2; }

		////	LRND expression = Expression RRND
		//LRND
		public RuleCall getLRNDTerminalRuleCall_2_0() { return cLRNDTerminalRuleCall_2_0; }

		//condition=Condition
		public Assignment getConditionAssignment_2_1() { return cConditionAssignment_2_1; }

		//Condition
		public RuleCall getConditionConditionParserRuleCall_2_1_0() { return cConditionConditionParserRuleCall_2_1_0; }

		//RRND
		public RuleCall getRRNDTerminalRuleCall_2_2() { return cRRNDTerminalRuleCall_2_2; }
	}

	public class ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.Aioc.Constant");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cIntValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cIntValueIntegerParserRuleCall_0_0 = (RuleCall)cIntValueAssignment_0.eContents().get(0);
		private final Assignment cFloatValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cFloatValueFloatParserRuleCall_1_0 = (RuleCall)cFloatValueAssignment_1.eContents().get(0);
		private final Assignment cStrValueAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cStrValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cStrValueAssignment_2.eContents().get(0);
		private final Assignment cTrueAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cTrueTRUETerminalRuleCall_3_0 = (RuleCall)cTrueAssignment_3.eContents().get(0);
		private final Assignment cFalseAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cFalseFALSETerminalRuleCall_4_0 = (RuleCall)cFalseAssignment_4.eContents().get(0);
		
		//Constant:
		//	intValue=Integer | floatValue=Float | strValue=STRING | true=TRUE | false=FALSE;
		@Override public ParserRule getRule() { return rule; }

		//intValue=Integer | floatValue=Float | strValue=STRING | true=TRUE | false=FALSE
		public Alternatives getAlternatives() { return cAlternatives; }

		//intValue=Integer
		public Assignment getIntValueAssignment_0() { return cIntValueAssignment_0; }

		//Integer
		public RuleCall getIntValueIntegerParserRuleCall_0_0() { return cIntValueIntegerParserRuleCall_0_0; }

		//floatValue=Float
		public Assignment getFloatValueAssignment_1() { return cFloatValueAssignment_1; }

		//Float
		public RuleCall getFloatValueFloatParserRuleCall_1_0() { return cFloatValueFloatParserRuleCall_1_0; }

		//strValue=STRING
		public Assignment getStrValueAssignment_2() { return cStrValueAssignment_2; }

		//STRING
		public RuleCall getStrValueSTRINGTerminalRuleCall_2_0() { return cStrValueSTRINGTerminalRuleCall_2_0; }

		//true=TRUE
		public Assignment getTrueAssignment_3() { return cTrueAssignment_3; }

		//TRUE
		public RuleCall getTrueTRUETerminalRuleCall_3_0() { return cTrueTRUETerminalRuleCall_3_0; }

		//false=FALSE
		public Assignment getFalseAssignment_4() { return cFalseAssignment_4; }

		//FALSE
		public RuleCall getFalseFALSETerminalRuleCall_4_0() { return cFalseFALSETerminalRuleCall_4_0; }
	}

	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.Aioc.Condition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftExpressionParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOperatorAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOperatorConditionOperatorParserRuleCall_1_0_0 = (RuleCall)cOperatorAssignment_1_0.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightConditionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Condition:
		//	left=Expression (operator=ConditionOperator right=Condition)?;
		@Override public ParserRule getRule() { return rule; }

		//left=Expression (operator=ConditionOperator right=Condition)?
		public Group getGroup() { return cGroup; }

		//left=Expression
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }

		//Expression
		public RuleCall getLeftExpressionParserRuleCall_0_0() { return cLeftExpressionParserRuleCall_0_0; }

		//(operator=ConditionOperator right=Condition)?
		public Group getGroup_1() { return cGroup_1; }

		//operator=ConditionOperator
		public Assignment getOperatorAssignment_1_0() { return cOperatorAssignment_1_0; }

		//ConditionOperator
		public RuleCall getOperatorConditionOperatorParserRuleCall_1_0_0() { return cOperatorConditionOperatorParserRuleCall_1_0_0; }

		//right=Condition
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//Condition
		public RuleCall getRightConditionParserRuleCall_1_1_0() { return cRightConditionParserRuleCall_1_1_0; }
	}

	public class ConditionOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.Aioc.ConditionOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cLtAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cLtLTTerminalRuleCall_0_0 = (RuleCall)cLtAssignment_0.eContents().get(0);
		private final Assignment cLeqAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cLeqLEQTerminalRuleCall_1_0 = (RuleCall)cLeqAssignment_1.eContents().get(0);
		private final Assignment cEqualAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cEqualEQUALTerminalRuleCall_2_0 = (RuleCall)cEqualAssignment_2.eContents().get(0);
		private final Assignment cGtAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cGtGTTerminalRuleCall_3_0 = (RuleCall)cGtAssignment_3.eContents().get(0);
		private final Assignment cGeqAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cGeqGEQTerminalRuleCall_4_0 = (RuleCall)cGeqAssignment_4.eContents().get(0);
		private final Assignment cNot_equalAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cNot_equalNOT_EQUALTerminalRuleCall_5_0 = (RuleCall)cNot_equalAssignment_5.eContents().get(0);
		private final Assignment cAndAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final RuleCall cAndANDTerminalRuleCall_6_0 = (RuleCall)cAndAssignment_6.eContents().get(0);
		private final Assignment cOrAssignment_7 = (Assignment)cAlternatives.eContents().get(7);
		private final RuleCall cOrORTerminalRuleCall_7_0 = (RuleCall)cOrAssignment_7.eContents().get(0);
		
		//ConditionOperator:
		//	lt?=LT | leq?=LEQ | equal?=EQUAL | gt?=GT | geq?=GEQ | not_equal?=NOT_EQUAL | and?=AND | or?=OR;
		@Override public ParserRule getRule() { return rule; }

		//lt?=LT | leq?=LEQ | equal?=EQUAL | gt?=GT | geq?=GEQ | not_equal?=NOT_EQUAL | and?=AND | or?=OR
		public Alternatives getAlternatives() { return cAlternatives; }

		//lt?=LT
		public Assignment getLtAssignment_0() { return cLtAssignment_0; }

		//LT
		public RuleCall getLtLTTerminalRuleCall_0_0() { return cLtLTTerminalRuleCall_0_0; }

		//leq?=LEQ
		public Assignment getLeqAssignment_1() { return cLeqAssignment_1; }

		//LEQ
		public RuleCall getLeqLEQTerminalRuleCall_1_0() { return cLeqLEQTerminalRuleCall_1_0; }

		//equal?=EQUAL
		public Assignment getEqualAssignment_2() { return cEqualAssignment_2; }

		//EQUAL
		public RuleCall getEqualEQUALTerminalRuleCall_2_0() { return cEqualEQUALTerminalRuleCall_2_0; }

		//gt?=GT
		public Assignment getGtAssignment_3() { return cGtAssignment_3; }

		//GT
		public RuleCall getGtGTTerminalRuleCall_3_0() { return cGtGTTerminalRuleCall_3_0; }

		//geq?=GEQ
		public Assignment getGeqAssignment_4() { return cGeqAssignment_4; }

		//GEQ
		public RuleCall getGeqGEQTerminalRuleCall_4_0() { return cGeqGEQTerminalRuleCall_4_0; }

		//not_equal?=NOT_EQUAL
		public Assignment getNot_equalAssignment_5() { return cNot_equalAssignment_5; }

		//NOT_EQUAL
		public RuleCall getNot_equalNOT_EQUALTerminalRuleCall_5_0() { return cNot_equalNOT_EQUALTerminalRuleCall_5_0; }

		//and?=AND
		public Assignment getAndAssignment_6() { return cAndAssignment_6; }

		//AND
		public RuleCall getAndANDTerminalRuleCall_6_0() { return cAndANDTerminalRuleCall_6_0; }

		//or?=OR
		public Assignment getOrAssignment_7() { return cOrAssignment_7; }

		//OR
		public RuleCall getOrORTerminalRuleCall_7_0() { return cOrORTerminalRuleCall_7_0; }
	}

	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.Aioc.Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final RuleCall cLRNDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cParamsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cParamsExpressionParserRuleCall_2_0_0 = (RuleCall)cParamsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final RuleCall cCOMMATerminalRuleCall_2_1_0 = (RuleCall)cGroup_2_1.eContents().get(0);
		private final Assignment cParamsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cParamsExpressionParserRuleCall_2_1_1_0 = (RuleCall)cParamsAssignment_2_1_1.eContents().get(0);
		private final RuleCall cRRNDTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//Function:
		//	name=ID LRND (params+=Expression (COMMA params+=Expression)*)?
		//	RRND;
		@Override public ParserRule getRule() { return rule; }

		//name=ID LRND (params+=Expression (COMMA params+=Expression)*)? RRND
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//LRND
		public RuleCall getLRNDTerminalRuleCall_1() { return cLRNDTerminalRuleCall_1; }

		//(params+=Expression (COMMA params+=Expression)*)?
		public Group getGroup_2() { return cGroup_2; }

		//params+=Expression
		public Assignment getParamsAssignment_2_0() { return cParamsAssignment_2_0; }

		//Expression
		public RuleCall getParamsExpressionParserRuleCall_2_0_0() { return cParamsExpressionParserRuleCall_2_0_0; }

		//(COMMA params+=Expression)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_2_1_0() { return cCOMMATerminalRuleCall_2_1_0; }

		//params+=Expression
		public Assignment getParamsAssignment_2_1_1() { return cParamsAssignment_2_1_1; }

		//Expression
		public RuleCall getParamsExpressionParserRuleCall_2_1_1_0() { return cParamsExpressionParserRuleCall_2_1_1_0; }

		//RRND
		public RuleCall getRRNDTerminalRuleCall_3() { return cRRNDTerminalRuleCall_3; }
	}

	public class IntegerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.Aioc.Integer");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//Integer:
		//	value=INT;
		@Override public ParserRule getRule() { return rule; }

		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}

	public class FloatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.Aioc.Float");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueDOUBLETerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//Float:
		//	value=DOUBLE;
		@Override public ParserRule getRule() { return rule; }

		//value=DOUBLE
		public Assignment getValueAssignment() { return cValueAssignment; }

		//DOUBLE
		public RuleCall getValueDOUBLETerminalRuleCall_0() { return cValueDOUBLETerminalRuleCall_0; }
	}
	
	
	private final AiocJElements pAiocJ;
	private final AiocElements pAioc;
	private final RuleElements pRule;
	private final NewRoleElements pNewRole;
	private final WhereElements pWhere;
	private final WhereCompareConditionElements pWhereCompareCondition;
	private final WhereExpressionBasicTermElements pWhereExpressionBasicTerm;
	private final PreambleElements pPreamble;
	private final FunctionLocationElements pFunctionLocation;
	private final FunctionListElements pFunctionList;
	private final LocationDefinitionElements pLocationDefinition;
	private final ChoreographyElements pChoreography;
	private final SeqBlockElements pSeqBlock;
	private final SkipElements pSkip;
	private final InteractionElements pInteraction;
	private final LocalCodeElements pLocalCode;
	private final IfThenElseElements pIfThenElse;
	private final WhileElements pWhile;
	private final ScopeElements pScope;
	private final RolesElements pRoles;
	private final NestedChoreographyElements pNestedChoreography;
	private final AssignmentSetElements pAssignmentSet;
	private final AssignmentElements pAssignment;
	private final ExpressionElements pExpression;
	private final SumExpressionElements pSumExpression;
	private final SumExpressionTermElements pSumExpressionTerm;
	private final ExpressionBasicTermElements pExpressionBasicTerm;
	private final ConstantElements pConstant;
	private final ConditionElements pCondition;
	private final ConditionOperatorElements pConditionOperator;
	private final FunctionElements pFunction;
	private final IntegerElements pInteger;
	private final FloatElements pFloat;
	private final TerminalRule tDOUBLE;
	private final TerminalRule tLCURLY;
	private final TerminalRule tRCURLY;
	private final TerminalRule tARROW;
	private final TerminalRule tSEMICOLON;
	private final TerminalRule tPIPE;
	private final TerminalRule tCOLON;
	private final TerminalRule tPLUS;
	private final TerminalRule tMINUS;
	private final TerminalRule tTIMES;
	private final TerminalRule tSLASH;
	private final TerminalRule tAT;
	private final TerminalRule tASSIGN;
	private final TerminalRule tDOT;
	private final TerminalRule tNOT;
	private final TerminalRule tLRND;
	private final TerminalRule tRRND;
	private final TerminalRule tCOMMA;
	private final TerminalRule tEQUAL;
	private final TerminalRule tNOT_EQUAL;
	private final TerminalRule tLEQ;
	private final TerminalRule tGEQ;
	private final TerminalRule tLT;
	private final TerminalRule tGT;
	private final TerminalRule tAND;
	private final TerminalRule tOR;
	private final TerminalRule tTRUE;
	private final TerminalRule tFALSE;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public AiocGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pAiocJ = new AiocJElements();
		this.pAioc = new AiocElements();
		this.pRule = new RuleElements();
		this.pNewRole = new NewRoleElements();
		this.pWhere = new WhereElements();
		this.pWhereCompareCondition = new WhereCompareConditionElements();
		this.pWhereExpressionBasicTerm = new WhereExpressionBasicTermElements();
		this.pPreamble = new PreambleElements();
		this.pFunctionLocation = new FunctionLocationElements();
		this.pFunctionList = new FunctionListElements();
		this.pLocationDefinition = new LocationDefinitionElements();
		this.pChoreography = new ChoreographyElements();
		this.pSeqBlock = new SeqBlockElements();
		this.pSkip = new SkipElements();
		this.pInteraction = new InteractionElements();
		this.pLocalCode = new LocalCodeElements();
		this.pIfThenElse = new IfThenElseElements();
		this.pWhile = new WhileElements();
		this.pScope = new ScopeElements();
		this.pRoles = new RolesElements();
		this.pNestedChoreography = new NestedChoreographyElements();
		this.pAssignmentSet = new AssignmentSetElements();
		this.pAssignment = new AssignmentElements();
		this.pExpression = new ExpressionElements();
		this.pSumExpression = new SumExpressionElements();
		this.pSumExpressionTerm = new SumExpressionTermElements();
		this.pExpressionBasicTerm = new ExpressionBasicTermElements();
		this.pConstant = new ConstantElements();
		this.pCondition = new ConditionElements();
		this.pConditionOperator = new ConditionOperatorElements();
		this.pFunction = new FunctionElements();
		this.pInteger = new IntegerElements();
		this.pFloat = new FloatElements();
		this.tDOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.Aioc.DOUBLE");
		this.tLCURLY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.Aioc.LCURLY");
		this.tRCURLY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.Aioc.RCURLY");
		this.tARROW = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.Aioc.ARROW");
		this.tSEMICOLON = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.Aioc.SEMICOLON");
		this.tPIPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.Aioc.PIPE");
		this.tCOLON = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.Aioc.COLON");
		this.tPLUS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.Aioc.PLUS");
		this.tMINUS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.Aioc.MINUS");
		this.tTIMES = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.Aioc.TIMES");
		this.tSLASH = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.Aioc.SLASH");
		this.tAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.Aioc.AT");
		this.tASSIGN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.Aioc.ASSIGN");
		this.tDOT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.Aioc.DOT");
		this.tNOT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.Aioc.NOT");
		this.tLRND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.Aioc.LRND");
		this.tRRND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.Aioc.RRND");
		this.tCOMMA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.Aioc.COMMA");
		this.tEQUAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.Aioc.EQUAL");
		this.tNOT_EQUAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.Aioc.NOT_EQUAL");
		this.tLEQ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.Aioc.LEQ");
		this.tGEQ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.Aioc.GEQ");
		this.tLT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.Aioc.LT");
		this.tGT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.Aioc.GT");
		this.tAND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.Aioc.AND");
		this.tOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.Aioc.OR");
		this.tTRUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.Aioc.TRUE");
		this.tFALSE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.Aioc.FALSE");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.Aioc".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//AiocJ:
	//	aioc=Aioc | ruleSet+=Rule*;
	public AiocJElements getAiocJAccess() {
		return pAiocJ;
	}
	
	public ParserRule getAiocJRule() {
		return getAiocJAccess().getRule();
	}

	//Aioc:
	//	functionLocation+=FunctionLocation*
	//	"preamble" LCURLY preamble=Preamble RCURLY
	//	"aioc" LCURLY choreography=Choreography RCURLY;
	public AiocElements getAiocAccess() {
		return pAioc;
	}
	
	public ParserRule getAiocRule() {
		return getAiocAccess().getRule();
	}

	//Rule:
	//	"rule" LCURLY
	//	functionLocation+=FunctionLocation* ("newRoles" COLON newRoles=NewRole)?
	//	locDefinition=LocationDefinition?
	//	"on" LCURLY where=Where RCURLY
	//	"do" LCURLY choreography=Choreography RCURLY
	//	RCURLY;
	public RuleElements getRuleAccess() {
		return pRule;
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}

	//NewRole:
	//	role=ID (COMMA nextRole=NewRole)?;
	public NewRoleElements getNewRoleAccess() {
		return pNewRole;
	}
	
	public ParserRule getNewRoleRule() {
		return getNewRoleAccess().getRule();
	}

	//Where:
	//	whereCondition=WhereCompareCondition
	//	| => paren?=LRND whereCondition=WhereCompareCondition RRND;
	public WhereElements getWhereAccess() {
		return pWhere;
	}
	
	public ParserRule getWhereRule() {
		return getWhereAccess().getRule();
	}

	//WhereCompareCondition:
	//	left=WhereExpressionBasicTerm operator=ConditionOperator
	//	right=WhereExpressionBasicTerm ((and?=AND | or?=OR) next=Where)?;
	public WhereCompareConditionElements getWhereCompareConditionAccess() {
		return pWhereCompareCondition;
	}
	
	public ParserRule getWhereCompareConditionRule() {
		return getWhereCompareConditionAccess().getRule();
	}

	//WhereExpressionBasicTerm:
	//	"N." nVariable=ID
	//	| "E." eVariable=ID
	//	| sVariable=ID
	//	| constant=Constant
	//	//										| true ?= TRUE
	//	//										| false ?= FALSE
	//	//										| 
	//;
	public WhereExpressionBasicTermElements getWhereExpressionBasicTermAccess() {
		return pWhereExpressionBasicTerm;
	}
	
	public ParserRule getWhereExpressionBasicTermRule() {
		return getWhereExpressionBasicTermAccess().getRule();
	}

	//Preamble:
	//	"starter:" starter=ID
	//	locDefinition=LocationDefinition?;
	public PreambleElements getPreambleAccess() {
		return pPreamble;
	}
	
	public ParserRule getPreambleRule() {
		return getPreambleAccess().getRule();
	}

	//FunctionLocation:
	//	"include" functions=FunctionList
	//	"from" location=STRING ("with" protocol=STRING)?;
	public FunctionLocationElements getFunctionLocationAccess() {
		return pFunctionLocation;
	}
	
	public ParserRule getFunctionLocationRule() {
		return getFunctionLocationAccess().getRule();
	}

	//FunctionList:
	//	functionName+=ID (COMMA functionName+=ID)*;
	public FunctionListElements getFunctionListAccess() {
		return pFunctionList;
	}
	
	public ParserRule getFunctionListRule() {
		return getFunctionListAccess().getRule();
	}

	//LocationDefinition:
	//	"location" AT role=ID COLON location=STRING
	//	continuation=LocationDefinition?;
	public LocationDefinitionElements getLocationDefinitionAccess() {
		return pLocationDefinition;
	}
	
	public ParserRule getLocationDefinitionRule() {
		return getLocationDefinitionAccess().getRule();
	}

	//Choreography:
	//	seqBlock=SeqBlock (PIPE par=Choreography)?;
	public ChoreographyElements getChoreographyAccess() {
		return pChoreography;
	}
	
	public ParserRule getChoreographyRule() {
		return getChoreographyAccess().getRule();
	}

	//SeqBlock:
	//	event=(Skip | Interaction | LocalCode | IfThenElse | While | Scope | NestedChoreography) (SEMICOLON
	//	next=Choreography)?;
	public SeqBlockElements getSeqBlockAccess() {
		return pSeqBlock;
	}
	
	public ParserRule getSeqBlockRule() {
		return getSeqBlockAccess().getRule();
	}

	//Skip:
	//	skip?="skip";
	public SkipElements getSkipAccess() {
		return pSkip;
	}
	
	public ParserRule getSkipRule() {
		return getSkipAccess().getRule();
	}

	//Interaction:
	//	operation=ID COLON
	//	sender=ID LRND
	//	senderExpression=SumExpression?
	//	RRND ARROW
	//	receiver=ID LRND
	//	receiverVariable=ID?
	//	RRND;
	public InteractionElements getInteractionAccess() {
		return pInteraction;
	}
	
	public ParserRule getInteractionRule() {
		return getInteractionAccess().getRule();
	}

	//// Local thread code
	//LocalCode:
	//	{LocalAskCommand} resultVariable=ID AT thread=ID ASSIGN "getInput" LRND question=Expression RRND
	//	| {LocalShowCommand} variable=ID AT thread=ID ASSIGN "show" LRND expression=Expression RRND
	//	| {LocalAssignmentCommand} variable=ID AT thread=ID ASSIGN (expression=Expression | function=Function);
	public LocalCodeElements getLocalCodeAccess() {
		return pLocalCode;
	}
	
	public ParserRule getLocalCodeRule() {
		return getLocalCodeAccess().getRule();
	}

	///**
	// * if (condition)@thread { Choreography } else { Choreography }
	// */ IfThenElse:
	//	(key=ID COLON)? 'if' LRND condition=Condition RRND AT thread=ID
	//	LCURLY then=Choreography RCURLY ('else' LCURLY else=Choreography RCURLY)?;
	public IfThenElseElements getIfThenElseAccess() {
		return pIfThenElse;
	}
	
	public ParserRule getIfThenElseRule() {
		return getIfThenElseAccess().getRule();
	}

	///*
	// * while (condition)@thread { Choreography }
	// */ While:
	//	'while' LRND condition=Condition RRND AT thread=ID
	//	LCURLY choreography=Choreography RCURLY (LCURLY key=ID RCURLY)?;
	public WhileElements getWhileAccess() {
		return pWhile;
	}
	
	public ParserRule getWhileRule() {
		return getWhileAccess().getRule();
	}

	////Scope code
	//Scope:
	//	'scope' AT thread=ID
	//	LCURLY choreography=Choreography RCURLY ('prop' LCURLY properties=AssignmentSet RCURLY)? ('roles' LCURLY roles=Roles
	//	RCURLY)? (LCURLY key=ID RCURLY)?;
	public ScopeElements getScopeAccess() {
		return pScope;
	}
	
	public ParserRule getScopeRule() {
		return getScopeAccess().getRule();
	}

	//Roles:
	//	roles+=ID (COMMA roles+=ID)*;
	public RolesElements getRolesAccess() {
		return pRoles;
	}
	
	public ParserRule getRolesRule() {
		return getRolesAccess().getRule();
	}

	////nested Choreography code
	//NestedChoreography:
	//	LCURLY
	//	choreography=Choreography
	//	RCURLY;
	public NestedChoreographyElements getNestedChoreographyAccess() {
		return pNestedChoreography;
	}
	
	public ParserRule getNestedChoreographyRule() {
		return getNestedChoreographyAccess().getRule();
	}

	///*** Assignment ***/ AssignmentSet:
	//	assignment=Assignment (COMMA continuation=AssignmentSet)?;
	public AssignmentSetElements getAssignmentSetAccess() {
		return pAssignmentSet;
	}
	
	public ParserRule getAssignmentSetRule() {
		return getAssignmentSetAccess().getRule();
	}

	//Assignment:
	//	"N." variable=ID ASSIGN expression=Expression;
	public AssignmentElements getAssignmentAccess() {
		return pAssignment;
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}

	///*** Expressions and conditions ***/ Expression:
	//	sumExpression=SumExpression;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//SumExpression:
	//	children+=ExpressionBasicTerm children+=SumExpressionTerm*;
	public SumExpressionElements getSumExpressionAccess() {
		return pSumExpression;
	}
	
	public ParserRule getSumExpressionRule() {
		return getSumExpressionAccess().getRule();
	}

	//SumExpressionTerm:
	//	{SumExpressionAddTerm} PLUS expression=ExpressionBasicTerm
	//	| {SumExpressionSubtractTerm} MINUS expression=ExpressionBasicTerm
	//	| {SumExpressionTimesTerm} TIMES expression=ExpressionBasicTerm
	//	| {SumExpressionDivideTerm} SLASH expression=ExpressionBasicTerm;
	public SumExpressionTermElements getSumExpressionTermAccess() {
		return pSumExpressionTerm;
	}
	
	public ParserRule getSumExpressionTermRule() {
		return getSumExpressionTermAccess().getRule();
	}

	//ExpressionBasicTerm:
	//	not?=NOT? variable=ID | constant=Constant | LRND condition=Condition RRND;
	public ExpressionBasicTermElements getExpressionBasicTermAccess() {
		return pExpressionBasicTerm;
	}
	
	public ParserRule getExpressionBasicTermRule() {
		return getExpressionBasicTermAccess().getRule();
	}

	//Constant:
	//	intValue=Integer | floatValue=Float | strValue=STRING | true=TRUE | false=FALSE;
	public ConstantElements getConstantAccess() {
		return pConstant;
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}

	//Condition:
	//	left=Expression (operator=ConditionOperator right=Condition)?;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}

	//ConditionOperator:
	//	lt?=LT | leq?=LEQ | equal?=EQUAL | gt?=GT | geq?=GEQ | not_equal?=NOT_EQUAL | and?=AND | or?=OR;
	public ConditionOperatorElements getConditionOperatorAccess() {
		return pConditionOperator;
	}
	
	public ParserRule getConditionOperatorRule() {
		return getConditionOperatorAccess().getRule();
	}

	//Function:
	//	name=ID LRND (params+=Expression (COMMA params+=Expression)*)?
	//	RRND;
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}

	//Integer:
	//	value=INT;
	public IntegerElements getIntegerAccess() {
		return pInteger;
	}
	
	public ParserRule getIntegerRule() {
		return getIntegerAccess().getRule();
	}

	//Float:
	//	value=DOUBLE;
	public FloatElements getFloatAccess() {
		return pFloat;
	}
	
	public ParserRule getFloatRule() {
		return getFloatAccess().getRule();
	}

	//terminal DOUBLE:
	//	INT? DOT INT;
	public TerminalRule getDOUBLERule() {
		return tDOUBLE;
	} 

	//terminal LCURLY:
	//	'{';
	public TerminalRule getLCURLYRule() {
		return tLCURLY;
	} 

	//terminal RCURLY:
	//	'}';
	public TerminalRule getRCURLYRule() {
		return tRCURLY;
	} 

	//terminal ARROW:
	//	'->';
	public TerminalRule getARROWRule() {
		return tARROW;
	} 

	//terminal SEMICOLON:
	//	';';
	public TerminalRule getSEMICOLONRule() {
		return tSEMICOLON;
	} 

	//terminal PIPE:
	//	'|';
	public TerminalRule getPIPERule() {
		return tPIPE;
	} 

	//terminal COLON:
	//	':';
	public TerminalRule getCOLONRule() {
		return tCOLON;
	} 

	//terminal PLUS:
	//	'+';
	public TerminalRule getPLUSRule() {
		return tPLUS;
	} 

	//terminal MINUS:
	//	'-';
	public TerminalRule getMINUSRule() {
		return tMINUS;
	} 

	//terminal TIMES:
	//	'*';
	public TerminalRule getTIMESRule() {
		return tTIMES;
	} 

	//terminal SLASH:
	//	'/';
	public TerminalRule getSLASHRule() {
		return tSLASH;
	} 

	//terminal AT:
	//	'@';
	public TerminalRule getATRule() {
		return tAT;
	} 

	//terminal ASSIGN:
	//	'=';
	public TerminalRule getASSIGNRule() {
		return tASSIGN;
	} 

	//terminal DOT:
	//	'.';
	public TerminalRule getDOTRule() {
		return tDOT;
	} 

	//terminal NOT:
	//	'!';
	public TerminalRule getNOTRule() {
		return tNOT;
	} 

	//terminal LRND:
	//	'(';
	public TerminalRule getLRNDRule() {
		return tLRND;
	} 

	//terminal RRND:
	//	')';
	public TerminalRule getRRNDRule() {
		return tRRND;
	} 

	//terminal COMMA:
	//	',';
	public TerminalRule getCOMMARule() {
		return tCOMMA;
	} 

	//terminal EQUAL:
	//	'==';
	public TerminalRule getEQUALRule() {
		return tEQUAL;
	} 

	//terminal NOT_EQUAL:
	//	'!=';
	public TerminalRule getNOT_EQUALRule() {
		return tNOT_EQUAL;
	} 

	//terminal LEQ:
	//	'<=';
	public TerminalRule getLEQRule() {
		return tLEQ;
	} 

	//terminal GEQ:
	//	'>=';
	public TerminalRule getGEQRule() {
		return tGEQ;
	} 

	//terminal LT:
	//	'<';
	public TerminalRule getLTRule() {
		return tLT;
	} 

	//terminal GT:
	//	'>';
	public TerminalRule getGTRule() {
		return tGT;
	} 

	//terminal AND:
	//	'and';
	public TerminalRule getANDRule() {
		return tAND;
	} 

	//terminal OR:
	//	'or';
	public TerminalRule getORRule() {
		return tOR;
	} 

	//terminal TRUE:
	//	"true";
	public TerminalRule getTRUERule() {
		return tTRUE;
	} 

	//terminal FALSE:
	//	"false";
	public TerminalRule getFALSERule() {
		return tFALSE;
	} 

	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
